import passport from "passport";
import { Strategy as LocalStrategy } from "passport-local";
import { Express, Request, Response, NextFunction } from "express";
import session from "express-session";
import { scrypt, randomBytes, timingSafeEqual } from "crypto";
import { promisify } from "util";
import { storage } from "./storage";
import { User } from "@shared/schema";
import connectPg from "connect-pg-simple";
import { pool, getUserPasswordFromDatabase } from "./db";
import jwt from "jsonwebtoken";
import { resendVerificationEmail } from "./email-verification";

const scryptAsync = promisify(scrypt);

// Fun√ß√£o auxiliar para detectar localiza√ß√£o por IP
export async function getLocationFromIP(ip: string): Promise<string> {
  console.log(`üåç Tentando detectar localiza√ß√£o para IP: ${ip}`);

  if (!ip) {
    console.log('‚ö†Ô∏è IP n√£o fornecido');
    return 'IP n√£o dispon√≠vel';
  }

  // Para IPs localhost, tentar detectar IP p√∫blico real
  if (ip === '127.0.0.1' || ip === '::1') {
    console.log('üîç IP localhost detectado, tentando obter IP p√∫blico...');
    try {
      const publicIpResponse = await fetch('https://api.ipify.org?format=json');
      if (publicIpResponse.ok) {
        const publicIpData = await publicIpResponse.json();
        const publicIp = publicIpData.ip;
        console.log(`üåê IP p√∫blico obtido: ${publicIp}`);
        return await getLocationFromPublicIP(publicIp);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel obter IP p√∫blico:', error.message);
    }
    return 'Localhost';
  }

  // Para IPs privados, tamb√©m tentar obter IP p√∫blico
  if (ip.startsWith('10.') || ip.startsWith('192.168.') || ip.startsWith('172.')) {
    console.log('üîç IP privado detectado, tentando obter IP p√∫blico...');
    try {
      const publicIpResponse = await fetch('https://api.ipify.org?format=json');
      if (publicIpResponse.ok) {
        const publicIpData = await publicIpResponse.json();
        const publicIp = publicIpData.ip;
        console.log(`üåê IP p√∫blico obtido: ${publicIp}`);
        return await getLocationFromPublicIP(publicIp);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel obter IP p√∫blico:', error.message);
    }
    return 'Rede Privada';
  }

  // Para IPs p√∫blicos, usar diretamente
  return await getLocationFromPublicIP(ip);
}

// Fun√ß√£o auxiliar para obter localiza√ß√£o de IP p√∫blico
async function getLocationFromPublicIP(ip: string): Promise<string> {
  try {
    console.log(`üîç Buscando localiza√ß√£o para IP p√∫blico: ${ip}`);

    // Usar servi√ßo gratuito para detectar localiza√ß√£o
    const response = await fetch(`http://ip-api.com/json/${ip}?fields=status,country,regionName,city`);
    if (!response.ok) {
      throw new Error('Falha na requisi√ß√£o de geolocaliza√ß√£o');
    }

    const data = await response.json();
    console.log(`üìç Resposta da geolocaliza√ß√£o:`, data);

    if (data.status === 'success') {
      const parts = [];
      if (data.city) parts.push(data.city);
      if (data.regionName) parts.push(data.regionName);
      if (data.country) parts.push(data.country);

      const location = parts.length > 0 ? parts.join(', ') : 'Localiza√ß√£o n√£o identificada';
      console.log(`‚úÖ Localiza√ß√£o detectada: ${location}`);
      return location;
    } else {
      console.log('‚ö†Ô∏è Servi√ßo de geolocaliza√ß√£o retornou status de falha');
      return 'Localiza√ß√£o n√£o identificada';
    }
  } catch (error) {
    console.error('‚ùå Erro ao detectar localiza√ß√£o:', error);
    return 'Erro na detec√ß√£o';
  }
}

// Fun√ß√£o auxiliar para extrair informa√ß√µes do browser
export function getBrowserInfo(userAgent: string): string {
  if (!userAgent || userAgent.trim() === '') {
    console.warn('User-Agent vazio ou indefinido');
    return 'Navegador desconhecido';
  }

  try {
    console.log(`üîç Processando User-Agent: ${userAgent}`);

    // Microsoft Edge (deve vir antes do Chrome)
    if (userAgent.includes('Edg/')) {
      const match = userAgent.match(/Edg\/([0-9.]+)/);
      const version = match ? match[1].split('.')[0] : '';
      const result = `Edge ${version}`.trim();
      console.log(`üåê Navegador detectado: ${result}`);
      return result;
    }

    // Opera (deve vir antes do Chrome)
    if (userAgent.includes('OPR/') || userAgent.includes('Opera/')) {
      const matchOPR = userAgent.match(/OPR\/([0-9.]+)/);
      const matchOpera = userAgent.match(/Opera\/([0-9.]+)/);
      const version = matchOPR ? matchOPR[1].split('.')[0] : 
                    matchOpera ? matchOpera[1].split('.')[0] : '';
      const result = `Opera ${version}`.trim();
      console.log(`üåê Navegador detectado: ${result}`);
      return result;
    }

    // Firefox
    if (userAgent.includes('Firefox/')) {
      const match = userAgent.match(/Firefox\/([0-9.]+)/);
      const version = match ? match[1].split('.')[0] : '';
      const result = `Firefox ${version}`.trim();
      console.log(`üåê Navegador detectado: ${result}`);
      return result;
    }

    // Chrome (deve vir depois do Edge e Opera para evitar conflitos)
    if (userAgent.includes('Chrome/') && !userAgent.includes('Edg/') && !userAgent.includes('OPR/')) {
      const match = userAgent.match(/Chrome\/([0-9.]+)/);
      const version = match ? match[1].split('.')[0] : '';
      const result = `Chrome ${version}`.trim();
      console.log(`üåê Navegador detectado: ${result}`);
      return result;
    }

    // Safari (deve vir depois do Chrome)
    if (userAgent.includes('Safari/') && !userAgent.includes('Chrome/') && !userAgent.includes('Edg/')) {
      const match = userAgent.match(/Version\/([0-9.]+).*Safari/);
      const version = match ? match[1].split('.')[0] : '';
      const result = `Safari ${version}`.trim();
      console.log(`üåê Navegador detectado: ${result}`);
      return result;
    }

    // Internet Explorer
    if (userAgent.includes('MSIE')) {
      const match = userAgent.match(/MSIE ([0-9.]+)/);
      const version = match ? match[1].split('.')[0] : '';
      const result = `Internet Explorer ${version}`.trim();
      console.log(`üåê Navegador detectado: ${result}`);
      return result;
    }

    // Internet Explorer 11
    if (userAgent.includes('Trident/')) {
      const match = userAgent.match(/rv:([0-9.]+)/);
      const version = match ? match[1].split('.')[0] : '11';
      const result = `Internet Explorer ${version}`.trim();
      console.log(`üåê Navegador detectado: ${result}`);
      return result;
    }

    console.warn(`‚ùì Navegador n√£o identificado para User-Agent: ${userAgent}`);
    return 'Navegador desconhecido';
  } catch (error) {
    console.error('‚ùå Erro ao extrair informa√ß√µes do navegador:', error);
    console.error('User-Agent que causou erro:', userAgent);
    return 'Navegador desconhecido';
  }
}

// Declarar os tipos para o Express e passport
declare global {
  namespace Express {
    // Defini√ß√£o expl√≠cita da interface User com todos os campos necess√°rios
    interface User {
      id: number;
      username: string;
      email: string;
      role: string;
      password?: string;
      is_active?: boolean;
      last_login?: Date;
      stripeCustomerId?: string | null; // Adicionado campo para suporte ao Stripe (pode ser null)
      nome?: string;
      setor?: string;
      perfil?: string;
      mainUserId?: number;
      mainUsername?: string;
      isAdditionalUser?: boolean;
      additionalUserId?: number; // ID do usu√°rio adicional quando isAdditionalUser = true
      twoFactorEnabled?: boolean;
      twoFactorSecret?: string;
      emailVerified?: boolean;
    }
  }
}

// Fun√ß√µes de utilidade para hash e verifica√ß√£o de senhas
export async function hashPassword(password: string): Promise<string> {
  const salt = randomBytes(16).toString("hex");
  const buf = (await scryptAsync(password, salt, 64)) as Buffer;
  return `${buf.toString("hex")}.${salt}`;
}

export async function comparePasswords(supplied: string, stored: string): Promise<boolean> {
  const [hashed, salt] = stored.split(".");
  const hashedBuf = Buffer.from(hashed, "hex");
  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;
  return timingSafeEqual(hashedBuf, suppliedBuf);
}

// Fun√ß√£o para verificar a senha caracter por caracter conforme solicitado
// Observa√ß√£o: Como as senhas est√£o criptografadas, isso simula a verifica√ß√£o por caracteres
// j√° que n√£o podemos fazer a verifica√ß√£o por caractere real da senha criptografada
// Fun√ß√£o que verifica a senha completa (usada para verifica√ß√£o real de seguran√ßa)
export async function comparePartialPassword(suppliedPartial: string, stored: string): Promise<boolean> {
  console.log(`Verificando senha parcial: "${suppliedPartial}" (comprimento: ${suppliedPartial.length})`);

  // Se a senha parcial estiver vazia, retornamos falso
  if (!suppliedPartial || suppliedPartial.trim() === '') {
    return false;
  }

  try {
    // Como n√£o podemos comparar caractere por caractere com senha criptografada,
    // realizamos a compara√ß√£o completa da senha
    const [hashed, salt] = stored.split(".");
    const hashedBuf = Buffer.from(hashed, "hex");
    const suppliedBuf = (await scryptAsync(suppliedPartial, salt, 64)) as Buffer;

    // Para seguran√ßa, s√≥ consideramos v√°lido se for exatamente a senha completa
    const isValid = timingSafeEqual(hashedBuf, suppliedBuf);
    console.log(`Resultado da verifica√ß√£o de senha: ${isValid ? 'v√°lida' : 'inv√°lida'}`);
    return isValid;
  } catch (error) {
    console.error("Erro na compara√ß√£o da senha:", error);
    return false;
  }
}

// Fun√ß√£o para verifica√ß√£o de prefixo de senha 
// Como estamos usando senhas hasheadas, esta fun√ß√£o agora funciona de forma aproximada
export async function verifyPasswordPrefix(partialPassword: string, userId: number): Promise<boolean> {
  if (!partialPassword || partialPassword.trim() === '' || !userId) {
    return false;
  }

  try {
    // Buscar o usu√°rio no banco de dados
    const user = await storage.getUser(userId);

    if (!user || !user.password) {
      console.log(`Usu√°rio ${userId} n√£o encontrado ou sem senha cadastrada`);
      return false;
    }

    // Recuperar a senha real (hashed) do usu√°rio
    const hashedPassword = user.password;

    // Verificar se a senha parcial √© a senha completa
    // Isso permite verificar se a senha est√° completa e correta
    const isFullPasswordMatch = await comparePasswords(partialPassword, hashedPassword);
    if (isFullPasswordMatch) {
      console.log(`Senha completa correta para usu√°rio ${userId}`);
      return true;
    }

    // Para verifica√ß√£o parcial com senhas hasheadas, temos que usar uma abordagem diferente,
    // j√° que n√£o podemos verificar caractere por caractere com a senha hasheada.

    // Abordagem para feedback ao usu√°rio durante digita√ß√£o:
    // 1. Para senha completa, fazemos verifica√ß√£o normal de hash (j√° feito acima)
    // 2. Para verifica√ß√£o parcial, consideramos o seguinte:
    //    a) Para as primeiras letras, usamos um padr√£o comum (ex: primeiro digito = a/1/etc)
    //    b) Considera prefixo v√°lido se seguir um padr√£o razo√°vel de constru√ß√£o de senha

    // IMPORTANTE: A verifica√ß√£o de prefixo para senhas hasheadas √© complexa.
    // Vamos utilizar algumas heur√≠sticas para dar feedback durante a digita√ß√£o,
    // mas S√ì consideramos a senha v√°lida quando o hash completo corresponder.

    // Verificamos alguns padr√µes comuns de senha
    const isNumericOnly = /^[0-9]+$/.test(partialPassword);
    const isAlphaOnly = /^[a-zA-Z]+$/.test(partialPassword);
    const isAlphaNumeric = /^[a-zA-Z0-9]+$/.test(partialPassword);
    const hasSpecialChars = /[!@#$%^&*(),.?":{}|<>]/.test(partialPassword);

    // Para feedback ao usu√°rio, usamos uma abordagem baseada no comprimento
    const isReasonableLength = partialPassword.length >= 3;

    console.log(`Verifica√ß√£o aproximada para usu√°rio ${userId}:`);
    console.log(`- Senha parcial: "${partialPassword}" (${partialPassword.length} caracteres)`);
    console.log(`- Comprimento razo√°vel: ${isReasonableLength ? "SIM" : "N√ÉO"}`);

    // Tentamos dar feedback positivo durante a digita√ß√£o, mas mantemos uma 
    // verifica√ß√£o m√≠nima para evitar falsas valida√ß√µes
    const isPotentialPrefix = partialPassword.length >= 3;

    return isPotentialPrefix;
  } catch (error) {
    console.error("Erro ao verificar prefixo de senha:", error);
    return false;
  }
}

// Configura√ß√£o da autentica√ß√£o
export function setupAuth(app: Express): void {
  // Configura√ß√£o melhorada do armazenamento de sess√£o PostgreSQL
  const PostgresSessionStore = connectPg(session);

  // Diagn√≥stico do pool de conex√£o
  console.log('üîÑ Configurando armazenamento de sess√£o PostgreSQL...');
  console.log('üìä Pool de conex√£o dispon√≠vel:', pool ? 'SIM' : 'N√ÉO');

  const sessionStore = new PostgresSessionStore({
    pool,
    createTableIfMissing: true,
    tableName: 'session',
    // Aumentando o intervalo de limpeza e dura√ß√£o da sess√£o
    pruneSessionInterval: 60 * 60, // Limpeza a cada 1 hora 
  });

  // Log para diagn√≥stico
  console.log('üîë Inicializando armazenamento de sess√£o...');

  // Configura√ß√µes de sess√£o mais robustas
  const sessionSettings: session.SessionOptions = {
    secret: process.env.SESSION_SECRET || "meu_preco_certo_app_secret",
    resave: false, // Mudado para false para evitar salvar sess√µes desnecess√°rias
    saveUninitialized: false, // Mudado para false para n√£o criar sess√µes para usu√°rios n√£o autenticados
    rolling: true,
    cookie: {
      secure: false, // Desabilitado para desenvolvimento
      maxAge: 30 * 24 * 60 * 60 * 1000, // 30 dias
      httpOnly: true,
      sameSite: 'lax'
    },
    store: sessionStore,
    name: 'mpc.sid' // Nome personalizado para o cookie
  };

  // Configura√ß√µes das sess√µes
  app.set("trust proxy", 1);

  // Adicionando manipula√ß√£o de erros para sess√£o
  app.use(session(sessionSettings));

  // Inicializar sistema de autentica√ß√£o
  app.use(passport.initialize());
  app.use(passport.session());

  // Log de confirma√ß√£o
  console.log('‚úÖ Sistema de sess√£o e autentica√ß√£o configurado com sucesso!');

  // Estrat√©gia de autentica√ß√£o local
  passport.use(
    new LocalStrategy(async (username, password, done) => {
      try {
        // Primeiro, verificar se √© um usu√°rio principal
        let user = await storage.getUserByUsername(username);

        // Se n√£o encontrar pelo username, tenta pelo email
        if (!user) {
          user = await storage.getUserByEmail(username);
        }

        // Se n√£o encontrou um usu√°rio principal, verificar se √© um usu√°rio adicional
        let isAdditionalUser = false;
        let additionalUser = null;

        if (!user) {
          console.log(`Usu√°rio principal n√£o encontrado, verificando usu√°rios adicionais para: ${username}`);

          // Buscar na tabela de usu√°rios adicionais por email
          const { executeQuery } = await import('./db');
          const result = await executeQuery(`
            SELECT ua.*, u.id as main_user_id, u.username as main_username 
            FROM usuarios_adicionais ua
            INNER JOIN users u ON ua.user_id = u.id
            WHERE ua.email = $1 AND ua.status = 'ativo'
          `, [username]);

          if (result.rows && result.rows.length > 0) {
            additionalUser = result.rows[0];
            isAdditionalUser = true;
            console.log(`Usu√°rio adicional encontrado: ${additionalUser.nome} (${additionalUser.email})`);
          }
        }

        // Se n√£o encontrou nem usu√°rio principal nem adicional
        if (!user && !additionalUser) {
          console.log(`Nenhum usu√°rio encontrado para: ${username}`);
          return done(null, false, { message: "Nome de usu√°rio ou senha incorretos" });
        }

        // Validar senha
        let isPasswordValid = false;
        let targetUser = null;

        if (isAdditionalUser && additionalUser) {
          // Verificar se o usu√°rio adicional tem senha definida
          if (!additionalUser.password) {
            console.log(`Usu√°rio adicional ${additionalUser.email} n√£o tem senha definida`);
            return done(null, false, { 
              message: "Senha n√£o definida para este usu√°rio. Entre em contato com o administrador.",
              needsPasswordSetup: true
            });
          }

          // Verificar se o email foi verificado para usu√°rios adicionais
          if (additionalUser.email_verified === false) {
            console.log(`Usu√°rio adicional ${additionalUser.email} com email n√£o verificado`);
            return done(null, false, { 
              message: "Por favor, verifique seu email antes de fazer login. Entre em contato com o administrador se necess√°rio.",
              needsEmailVerification: true,
              emailSent: false
            });
          }

          isPasswordValid = await comparePasswords(password, additionalUser.password);

          if (isPasswordValid) {
            // Criar objeto user compat√≠vel para usu√°rio adicional
            targetUser = {
              id: additionalUser.main_user_id, // Usar ID do usu√°rio principal para carregar dados
              additionalUserId: additionalUser.id, // Manter ID do usu√°rio adicional para refer√™ncia
              username: additionalUser.email, // Usar email como username para usu√°rios adicionais
              email: additionalUser.email,
              role: additionalUser.role || "additional_user",
              nome: additionalUser.nome,
              setor: additionalUser.setor,
              perfil: additionalUser.perfil,
              mainUserId: additionalUser.main_user_id,
              mainUsername: additionalUser.main_username,
              isAdditionalUser: true,
              twoFactorEnabled: additionalUser.two_factor_enabled || false,
              twoFactorSecret: additionalUser.two_factor_secret,
              emailVerified: additionalUser.email_verified !== false
            };

            // Atualizar √∫ltimo login para usu√°rio adicional
            const { executeQuery } = await import('./db');
            await executeQuery(`
              UPDATE usuarios_adicionais 
              SET last_login = NOW(), updated_at = NOW() 
              WHERE id = $1
            `, [additionalUser.id]);

            console.log(`Login de usu√°rio adicional bem-sucedido: ${targetUser.nome} (${targetUser.email})`);
          }
        } else if (user) {
          // Verifica√ß√£o para usu√°rio principal
          isPasswordValid = await comparePasswords(password, user.password);

          if (isPasswordValid) {
            targetUser = user;

            // Verificar se o email foi verificado para usu√°rios principais
            if (user.emailVerified === false) {
              console.log(`Usu√°rio principal ${username} tentou login com email n√£o verificado`);

              try {
                await resendVerificationEmail(user.email);
                console.log(`Email de verifica√ß√£o reenviado automaticamente para ${user.email}`);

                return done(null, false, { 
                  message: "Por favor, verifique seu email antes de fazer login. Um novo email de verifica√ß√£o foi enviado.",
                  needsEmailVerification: true,
                  emailSent: true
                });
              } catch (error) {
                console.error(`Erro ao reenviar email de verifica√ß√£o para ${user.email}:`, error);
                return done(null, false, { 
                  message: "Por favor, verifique seu email antes de fazer login. Verifique sua caixa de entrada.",
                  needsEmailVerification: true,
                  emailSent: false
                });
              }
            }

            // Atualizar √∫ltimo login para usu√°rio principal
            await storage.updateLastLogin(user.id);
          }
        }

        if (!isPasswordValid) {
          console.log(`Senha inv√°lida para usu√°rio: ${username}`);
          return done(null, false, { message: "Nome de usu√°rio ou senha incorretos" });
        }

        // Log de atividade
        const activityUserId = isAdditionalUser ? additionalUser.main_user_id : targetUser.id;
        await storage.createActivityLog({
          userId: activityUserId,
          tipoOperacao: "login",
          entidade: isAdditionalUser ? "usuarios_adicionais" : "users",
          entidadeId: targetUser.id,
          descricao: isAdditionalUser 
            ? `Login de usu√°rio adicional: ${targetUser.nome} (${targetUser.email})`
            : "Login realizado com sucesso",
          ipAddress: "",
          userAgent: "",
          userType: isAdditionalUser ? "additional" : "main"
        });

        // Adicionar informa√ß√µes sobre tipo de usu√°rio
        if (isAdditionalUser) {
          targetUser.isAdditionalUser = true;
          targetUser.additionalUserId = additionalUser.id;
          targetUser.mainUserId = additionalUser.main_user_id;
        } else {
          targetUser.isAdditionalUser = false;
        }

        return done(null, targetUser);
      } catch (err) {
        console.error("Erro durante autentica√ß√£o:", err);
        return done(err);
      }
    })
  );

  // Serializa√ß√£o/Deserializa√ß√£o de usu√°rio para a sess√£o
  passport.serializeUser((user, done) => {
    // Serializar com informa√ß√£o sobre tipo de usu√°rio
    const userInfo = {
      id: user.isAdditionalUser ? user.additionalUserId : user.id, // Usar ID correto para deserializa√ß√£o
      isAdditional: user.isAdditionalUser || false
    };
    done(null, userInfo);
  });

  passport.deserializeUser(async (userInfo: any, done) => {
    try {
      let user = null;

      // Se for um objeto com informa√ß√µes de tipo
      if (typeof userInfo === 'object' && userInfo.id) {
        if (userInfo.isAdditional) {
          // Buscar usu√°rio adicional
          const { executeQuery } = await import('./db');
          const result = await executeQuery(`
            SELECT ua.*, u.id as main_user_id, u.username as main_username 
            FROM usuarios_adicionais ua
            INNER JOIN users u ON ua.user_id = u.id
            WHERE ua.id = $1 AND ua.status = 'ativo'
          `, [userInfo.id]);

          if (result.rows && result.rows.length > 0) {
            const additionalUser = result.rows[0];
            user = {
              id: additionalUser.main_user_id, // Usar ID do usu√°rio principal para carregar dados
              additionalUserId: additionalUser.id, // Manter ID do usu√°rio adicional para refer√™ncia
              username: additionalUser.email,
              email: additionalUser.email,
              role: additionalUser.role || "additional_user",
              nome: additionalUser.nome,
              setor: additionalUser.setor,
              perfil: additionalUser.perfil,
              mainUserId: additionalUser.main_user_id,
              mainUsername: additionalUser.main_username,
              isAdditionalUser: true,
              twoFactorEnabled: additionalUser.two_factor_enabled || false,
              twoFactorSecret: additionalUser.two_factor_secret,
              emailVerified: additionalUser.email_verified !== false
            };
          }
        } else {
          // Buscar usu√°rio principal
          user = await storage.getUser(userInfo.id);
        }
      } else {
        // Compatibilidade com sess√µes antigas (apenas ID num√©rico)
        const id = typeof userInfo === 'object' ? userInfo.id : userInfo;

        // Primeiro tentar como usu√°rio principal
        user = await storage.getUser(id);

        // Se n√£o encontrar, tentar como usu√°rio adicional
        if (!user) {
          const { executeQuery } = await import('./db');
          const result = await executeQuery(`
            SELECT ua.*, u.id as main_user_id, u.username as main_username 
            FROM usuarios_adicionais ua
            INNER JOIN users u ON ua.user_id = u.id
            WHERE ua.id = $1 AND ua.status = 'ativo'
          `, [id]);

          if (result.rows && result.rows.length > 0) {
            const additionalUser = result.rows[0];
            user = {
              id: additionalUser.main_user_id, // Usar ID do usu√°rio principal para carregar dados
              additionalUserId: additionalUser.id, // Manter ID do usu√°rio adicional para refer√™ncia
              username: additionalUser.email,
              email: additionalUser.email,
              role: additionalUser.role || "additional_user",
              nome: additionalUser.nome,
              setor: additionalUser.setor,
              perfil: additionalUser.perfil,
              mainUserId: additionalUser.main_user_id,
              mainUsername: additionalUser.main_username,
              isAdditionalUser: true,
              twoFactorEnabled: additionalUser.two_factor_enabled || false,
              twoFactorSecret: additionalUser.two_factor_secret,
              emailVerified: additionalUser.email_verified !== false
            };
          }
        }
      }

      if (!user) {
        return done(null, false);
      }

      done(null, user);
    } catch (err) {
      console.error("Erro na deserializa√ß√£o do usu√°rio:", err);
      done(err);
    }
  });

  // Registra as rotas de autentica√ß√£o
  // Registro de novo usu√°rio
  app.post("/api/register", async (req, res, next) => {
    try {
      // Verificar apenas se o e-mail j√° existe, permitindo m√∫ltiplos usu√°rios com o mesmo nome
      const existingEmail = await storage.getUserByEmail(req.body.email);
      if (existingEmail) {
        return res.status(400).json({ message: "Email j√° est√° em uso" });
      }

      // Hash da senha
      const hashedPassword = await hashPassword(req.body.password);

      // Cria usu√°rio com emailVerified como false inicialmente
      const user = await storage.createUser({
        ...req.body,
        password: hashedPassword,
        role: "user",
        emailVerified: false // Usu√°rio inicia com email n√£o verificado
      });

      // Cria perfil inicial vazio
      await storage.createUserProfile({
        userId: user.id,
        nome: "",
        sobrenome: "",
        empresa: "",
        cargo: "",
        telefone: "",
        cpfCnpj: "",
        endereco: "",
        cidade: "",
        estado: "",
        cep: "",
        configuracoes: {
          tema: "light",
          notificacoes: true,
          exibirTutorial: true
        }
      });

      // Log de atividade
      await storage.createActivityLog({
        userId: user.id,
        tipoOperacao: "criar",
        entidade: "users",
        entidadeId: user.id,
        descricao: "Novo usu√°rio registrado",
        ipAddress: req.ip || "",
        userAgent: req.headers["user-agent"] || "",
      });

      // Enviar email de verifica√ß√£o
      try {
        // Importar diretamente o m√≥dulo de email-verification
        const { sendAccountVerificationEmail } = await import('./email-verification');

        // Enviar o email de verifica√ß√£o diretamente
        // Envio de email para o usu√°rio
        const emailSent = await sendAccountVerificationEmail(user.id, user.email, user.username);

        if (!emailSent) {
          // S√≥ registra log em caso de falha
          // Tentativa alternativa com mais informa√ß√µes de erro
          const { sendEmail } = await import('./email');
          const testSubject = "Verifica√ß√£o de Conta - Meu Pre√ßo Certo";
          const testHtml = `
            <div style="font-family: Arial, sans-serif; padding: 20px;">
              <h2>Verifica√ß√£o de Email</h2>
              <p>Ol√° ${user.username},</p>
              <p>Este √© um email de verifica√ß√£o de cadastro do sistema Meu Pre√ßo Certo.</p>
              <p>Para ativar sua conta, por favor entre em contato com o suporte.</p>
            </div>
          `;

          try {
            await sendEmail({
              to: user.email,
              subject: testSubject,
              html: testHtml
            });
            // Email enviado com sucesso
          } catch (secondaryError) {
            // Registramos o erro mas continuamos o fluxo
          }
        }
      } catch (emailError) {
        // Continuamos com o processo mesmo se falhar o envio do email
      }

      // N√£o fazer login autom√°tico ap√≥s o registro
      // O usu√°rio precisar√° verificar o email antes de poder fazer login
      return res.status(201).json({ 
        id: user.id, 
        username: user.username,
        email: user.email,
        role: user.role,
        emailVerified: false,
        emailVerificationSent: true,
        message: "Conta criada com sucesso. Por favor, verifique seu email para ativar sua conta antes de fazer login."
      });
    } catch (error) {
      console.error("Erro no registro:", error);
      return res.status(500).json({ message: "Erro interno durante o registro" });
    }
  });

  // Login
  app.post("/api/login", (req, res, next) => {
    passport.authenticate("local", (err, user, info) => {
      if (err) return next(err);
      if (!user) return res.status(401).json(info);

      req.login(user, async (err) => {
        if (err) return next(err);

        // Criar sess√£o ativa na tabela user_sessions
        try {
          // Para usu√°rios adicionais, usar o ID do usu√°rio adicional para a sess√£o
          const sessionUserId = user.isAdditionalUser ? user.additionalUserId : user.id;
          console.log(`üîÑ Iniciando cria√ß√£o de sess√£o para usu√°rio ${user.id} (sess√£o ser√° criada para user_id: ${sessionUserId})`);

          const userAgent = req.headers['user-agent'] || '';
          const browser = getBrowserInfo(userAgent);
          // Capturar apenas o IP p√∫blico real
          const forwardedFor = req.headers['x-forwarded-for'];
          let userIP = '127.0.0.1';

          if (forwardedFor) {
            // x-forwarded-for pode conter m√∫ltiplos IPs separados por v√≠rgula
            // O primeiro √© sempre o IP real do cliente
            const ips = forwardedFor.toString().split(',');
            userIP = ips[0].trim();
            console.log(`üîç IP p√∫blico capturado no login: ${userIP}`);
          } else {
            userIP = req.ip || req.connection.remoteAddress || '127.0.0.1';
            console.log(`üîç IP alternativo capturado: ${userIP}`);
          }

          console.log(`üîç Debug sess√£o - User-Agent: ${userAgent}`);
          console.log(`üîç Debug sess√£o - Browser extra√≠do: ${browser}`);
          console.log(`üîç Debug sess√£o - IP: ${userIP}`);

          // Detectar localiza√ß√£o do IP
          const location = await getLocationFromIP(userIP);
          console.log(`üåç Localiza√ß√£o detectada: ${location}`);

          const sessionData = {
            userId: sessionUserId, // Usar o ID espec√≠fico do usu√°rio (adicional se for adicional)
            token: req.sessionID,
            deviceInfo: userAgent || 'Dispositivo desconhecido',
            browser: browser,
            ip: userIP,
            location: location,
            lastActivity: new Date(),
            expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 dias
            isActive: true
          };

          const sessionResult = await storage.createUserSession(sessionData);

          if (sessionResult && sessionResult.id) {
            console.log(`‚úÖ Sess√£o criada com sucesso - ID: ${sessionResult.id} para usu√°rio ${user.id}`);
          } else {
            console.error('‚ö†Ô∏è Sess√£o criada mas sem retorno de ID');
          }
        } catch (sessionError) {
          console.error('‚ùå Erro ao criar sess√£o na tabela user_sessions:', sessionError);
          console.error('Detalhes do erro:', {
            message: sessionError.message,
            stack: sessionError.stack
          });
          // N√£o interrompe o login se houver erro na cria√ß√£o da sess√£o
        }

        // Verificar se o usu√°rio tem 2FA ativado
        const has2FAEnabled = user.twoFactorEnabled === true && user.twoFactorSecret;

        // Se n√£o tem 2FA ativado, marcar a sess√£o como verificada automaticamente
        if (!has2FAEnabled) {
          req.session.twoFactorVerified = true;
          await new Promise<void>((resolve) => {
            req.session.save(() => resolve());          });
        }

        // Gerar token JWT para ser usado na verifica√ß√£o 2FA se necess√°rio
        const jwtSecret = process.env.JWT_SECRET || 'meu_preco_certo_app_secret';
        const token = jwt.sign({ id: user.id }, jwtSecret, { expiresIn: '5m' });

        console.log(`Usu√°rio ${user.id} (${user.email}) logado com sucesso. 2FA ativado: ${has2FAEnabled}`);

        return res.status(200).json({ 
          id: user.id, 
          username: user.username,
          email: user.email,
          role: user.role,
          token, // Adicionando o token √† resposta
          requires2FA: has2FAEnabled, // Informar ao frontend se precisa de verifica√ß√£o 2FA
          twoFactorVerified: !has2FAEnabled // Se n√£o tem 2FA, j√° est√° verificado
        });
      });
    })(req, res, next);
  });

  // Logout
  app.post("/api/logout", async (req, res, next) => {
    console.log('üö™ Processando logout...');

    if (req.isAuthenticated && typeof req.isAuthenticated === 'function' && req.isAuthenticated()) {
      const userId = req.user!.id;
      const sessionId = req.sessionID;

      try {
        // 1. Invalidar sess√£o na tabela user_sessions (marca como inativa E remove)
        const sessionInvalidated = await storage.invalidateUserSession(sessionId);
        console.log(`‚úÖ Sess√£o ${sessionId} invalidada: ${sessionInvalidated}`);

        // NOVO: Tamb√©m remover da tabela 'session' do PostgreSQL (onde o express-session armazena)
        try {
          const { connectionManager } = await import('./connection-manager');
          await connectionManager.executeQuery(`
            DELETE FROM session WHERE sid = $1
          `, [sessionId]);
          console.log(`‚úÖ Sess√£o ${sessionId.substring(0, 8)}... removida da tabela session do PostgreSQL`);
        } catch (sessionTableError) {
          console.error(`‚ö†Ô∏è Erro ao remover da tabela session:`, sessionTableError);
        }

        // 2. Log de atividade
        await storage.createActivityLog({
          userId,
          tipoOperacao: "logout",
          entidade: "users",
          entidadeId: userId,
          descricao: "Logout realizado com sucesso",
          ipAddress: req.ip || "",
          userAgent: req.headers["user-agent"] || "",
        });

        console.log(`üìù Log de atividade de logout criado para usu√°rio ${userId}`);
      } catch (error) {
        console.error('‚ö†Ô∏è Erro ao processar logout:', error);
        // Continuar com logout mesmo se houver erro na invalida√ß√£o
      }
    }

    // 3. Logout do Passport e destruir sess√£o
    req.logout((err) => {
      if (err) {
        console.error('‚ùå Erro no logout do Passport:', err);
        return next(err);
      }

      // 4. Destruir sess√£o do express-session
      req.session.destroy((err) => {
        if (err) {
          console.error('‚ùå Erro ao destruir sess√£o:', err);
          return next(err);
        }

        // 5. Limpar cookies com configura√ß√µes mais robustas
        res.clearCookie('connect.sid', { 
          path: '/', 
          httpOnly: true, 
          secure: false 
        });
        res.clearCookie('mpc.sid', { 
          path: '/', 
          httpOnly: true, 
          secure: false 
        });

        // 6. Adicionar headers para evitar cache
        res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
        res.setHeader('Pragma', 'no-cache');
        res.setHeader('Expires', '0');

        console.log('‚úÖ Logout completado com sucesso');
        return res.status(200).json({ 
          success: true, 
          message: 'Logout realizado com sucesso' 
        });
      });
    });
  });

  // Verificar se o usu√°rio est√° autenticado
  app.get("/api/user", (req, res) => {
    if (!req.isAuthenticated || typeof req.isAuthenticated !== 'function' || !req.isAuthenticated()) {
      return res.status(401).json({ message: "N√£o autenticado" });
    }

    const userData = { 
      id: req.user!.id, 
      username: req.user!.username,
      email: req.user!.email,
      role: req.user!.role
    };

    // Incluir campos espec√≠ficos para usu√°rios adicionais
    if (req.user!.isAdditionalUser) {
      Object.assign(userData, {
        nome: req.user!.nome,
        setor: req.user!.setor,
        perfil: req.user!.perfil,
        mainUserId: req.user!.mainUserId,
        mainUsername: req.user!.mainUsername,
        isAdditionalUser: true,
        twoFactorEnabled: req.user!.twoFactorEnabled,
        emailVerified: req.user!.emailVerified
      });
    }

    return res.status(200).json(userData);
  });

  // Recupera√ß√£o de senha - Etapa 1: Solicita√ß√£o (simula√ß√£o)
  app.post("/api/recover-password", async (req, res) => {
    try {
      const { email } = req.body;
      const user = await storage.getUserByEmail(email);

      if (!user) {
        // Por seguran√ßa, n√£o informamos que o email n√£o existe
        return res.status(200).json({ message: "Se este email estiver registrado, enviaremos instru√ß√µes para redefinir a senha." });
      }

      // Em um sistema real, aqui enviar√≠amos um email com um token
      // Por enquanto, apenas simulamos o processo

      return res.status(200).json({ 
        message: "Se este email estiver registrado, enviaremos instru√ß√µes para redefinir a senha.",
        // Apenas para facilitar testes:
        userId: user.id,
        resetToken: "token_simulado_" + randomBytes(16).toString("hex")
      });
    } catch (error) {
      console.error("Erro na recupera√ß√£o de senha:", error);
      return res.status(500).json({ message: "Erro interno durante a recupera√ß√£o de senha" });
    }
  });

  // Recupera√ß√£o de senha - Etapa 2: Redefini√ß√£o (simula√ß√£o)
  app.post("/api/reset-password", async (req, res) => {
    try {
      const { userId, token, newPassword } = req.body;

      // Aqui verificar√≠amos o token, mas por enquanto apenas simulamos
      if (!token || !token.startsWith("token_simulado_")){
        return res.status(400).json({ message: "Token inv√°lido ou expirado" });
      }

      const user = await storage.getUser(userId);
      if (!user) {
        return res.status(404).json({ message: "Usu√°rio n√£o encontrado" });
      }

      // Atualiza a senha
      const hashedPassword = await hashPassword(newPassword);
      await storage.updatePassword(userId, hashedPassword);

      // Log de atividade
      await storage.createActivityLog({
        userId,
        tipoOperacao: "atualizar",
        entidade: "users",
        entidadeId: userId,
        descricao: "Senha redefinida com sucesso",
        ipAddress: req.ip || "",
        userAgent: req.headers["user-agent"] || "",
      });

      return res.status(200).json({ message: "Senha redefinida com sucesso" });
    } catch (error) {
      console.error("Erro na redefini√ß√£o de senha:", error);
      return res.status(500).json({ message: "Erro interno durante a redefini√ß√£o de senha" });
    }
  });

  // Atualiza√ß√£o de perfil
  app.put("/api/profile", async (req, res) => {
    if (!req.isAuthenticated || typeof req.isAuthenticated !== 'function' || !req.isAuthenticated()) {
      return res.status(401).json({ message: "N√£o autenticado" });
    }

    try {
      const userId = req.user!.id;
      const profile = await storage.getUserProfile(userId);

      if (!profile) {
        // Cria um perfil se n√£o existir
        const newProfile = await storage.createUserProfile({
          userId,
          ...req.body,
          configuracoes: req.body.configuracoes || {
            tema: "light",
            notificacoes: true,
            exibirTutorial: true
          }
        });

        return res.status(201).json(newProfile);
      }

      // Atualiza o perfil existente
      const updatedProfile = await storage.updateUserProfile(userId, req.body);

      // Log de atividade
      await storage.createActivityLog({
        userId,
        tipoOperacao: "atualizar",
        entidade: "userProfiles",
        entidadeId: profile.id,
        descricao: "Perfil atualizado",
        ipAddress: req.ip || "",
        userAgent: req.headers["user-agent"] || "",
      });

      return res.status(200).json(updatedProfile);
    } catch (error) {
      console.error("Erro na atualiza√ß√£o do perfil:", error);
      return res.status(500).json({ message: "Erro interno durante a atualiza√ß√£o do perfil" });
    }
  });

  // Rota de verifica√ß√£o de status de autentica√ß√£o
  app.get("/api/auth/status", (req, res) => {
    console.log("Verificando status de autentica√ß√£o", {
      isAuthenticated: req.isAuthenticated && typeof req.isAuthenticated === 'function' ? req.isAuthenticated() : false,
      sessionID: req.sessionID,
      user: req.user ? { id: req.user.id, username: req.user.username, isAdditional: req.user.isAdditionalUser } : null
    });

    if (req.isAuthenticated && typeof req.isAuthenticated === 'function' && req.isAuthenticated()) {
      const userData = {
        id: req.user!.id,
        username: req.user!.username,
        email: req.user!.email,
        role: req.user!.role
      };

      // Incluir dados espec√≠ficos para usu√°rios adicionais
      if (req.user!.isAdditionalUser) {
        Object.assign(userData, {
          nome: req.user!.nome,
          setor: req.user!.setor,
          perfil: req.user!.perfil,
          mainUserId: req.user!.mainUserId,
          mainUsername: req.user!.mainUsername,
          isAdditionalUser: true,
          twoFactorEnabled: req.user!.twoFactorEnabled,
          emailVerified: req.user!.emailVerified
        });
      }

      return res.status(200).json({
        authenticated: true,
        user: userData
      });
    } else {
      return res.status(200).json({
        authenticated: false,
        message: "Usu√°rio n√£o autenticado"
      });
    }
  });

  // Rota de verifica√ß√£o de autentica√ß√£o para o sistema de prote√ß√£o de rotas no frontend
  app.get("/api/auth/verify", (req, res) => {
    // Verifica se o usu√°rio est√° autenticado e sua sess√£o √© v√°lida
    if (req.isAuthenticated && typeof req.isAuthenticated === 'function' && req.isAuthenticated() && req.user) {
      return res.status(200).json({
        authenticated: true,
        verified: true
      });
    } else {
      // Se n√£o estiver autenticado, retorna 401 (N√£o autorizado)
      return res.status(401).json({
        authenticated: false,
        verified: false,
        message: "Sess√£o inv√°lida ou expirada. Fa√ßa login novamente."
      });
    }
  });

  // Obter perfil de usu√°rio
  app.get("/api/profile", async (req, res) => {
    if (!req.isAuthenticated || typeof req.isAuthenticated !== 'function' || !req.isAuthenticated()) {
      return res.status(401).json({ message: "N√£o autenticado" });
    }

    try {
      const userId = req.user!.id;
      const profile = await storage.getUserProfile(userId);

      if (!profile) {
        return res.status(404).json({ message: "Perfil n√£o encontrado" });
      }

      return res.status(200).json(profile);
    } catch (error) {
      console.error("Erro ao buscar perfil:", error);
      return res.status(500).json({ message: "Erro interno ao buscar perfil" });
    }
  });

  // Hist√≥rico de atividades
  app.get("/api/activity-log", async (req, res) => {
    if (!req.isAuthenticated || typeof req.isAuthenticated !== 'function' || !req.isAuthenticated()) {
      return res.status(401).json({ message: "N√£o autenticado" });
    }

    try {
      const userId = req.user!.id;
      const limit = req.query.limit ? parseInt(req.query.limit as string) : 24;

      const logs = await storage.getActivityLogs(userId, limit);
      return res.status(200).json(logs);
    } catch (error) {
      console.error("Erro ao buscar logs de atividade:", error);
      return res.status(500).json({ message: "Erro interno ao buscar logs de atividade" });
    }
  });

  // Middleware para atualizar atividade da sess√£o
  app.use('/api/*', async (req, res, next) => {
    if (req.isAuthenticated && typeof req.isAuthenticated === 'function' && req.isAuthenticated() && req.sessionID) {
      try {
        await storage.updateSessionActivity(req.sessionID);
      } catch (error) {
        // Log silencioso para n√£o interromper as requisi√ß√µes
        console.debug('Erro ao atualizar atividade da sess√£o:', error);
      }
    }
    next();
  });

  // Middleware para verificar autentica√ß√£o em rotas protegidas
  app.use('/api/protected/*', (req, res, next) => {
    if (!req.isAuthenticated || typeof req.isAuthenticated !== 'function' || !req.isAuthenticated()) {
      return res.status(401).json({ message: "Acesso n√£o autorizado" });
    }
    next();
  });
}

// Extens√£o de tipos para usu√°rio e sess√£o
declare global {
  namespace Express {
    interface User {
      id: number;
      email: string;
      role: string;
      twoFactorEnabled?: boolean;
      twoFactorSecret?: string;
    }

    interface Session {
      twoFactorVerified?: boolean;
    }
  }
}

// Middleware para verificar autentica√ß√£o e conformidade com 2FA se necess√°rio
export function isAuthenticated(req: Request, res: Response, next: NextFunction) {
  // Verifica√ß√£o flex√≠vel de autentica√ß√£o
  const isAuth = req.isAuthenticated?.() || !!req.session?.passport?.user || !!req.user?.id;

  if (!isAuth) {
    console.log(`‚ùå Acesso negado para ${req.originalUrl} - Usu√°rio n√£o autenticado`);
    return res.status(401).json({ message: "Acesso n√£o autorizado" });
  }

  // NOVO: Verificar se a sess√£o ainda existe na tabela user_sessions_additional
  // Isso garante que usu√°rios com sess√µes encerradas sejam deslogados
  if (req.sessionID && req.user?.id) {
    // Fazer verifica√ß√£o ass√≠ncrona da sess√£o
    (async () => {
      try {
        const { connectionManager } = await import('./connection-manager');

        // Verificar se a sess√£o ainda existe na tabela user_sessions_additional
        const sessionExists = await connectionManager.executeQuery(`
          SELECT id FROM user_sessions_additional 
          WHERE token = $1 AND is_active = true AND expires_at > NOW()
        `, [req.sessionID]);

        if (sessionExists.rows.length === 0) {
          console.log(`üîí Sess√£o ${req.sessionID.substring(0, 8)}... n√£o encontrada ou expirada - for√ßando logout`);

          // Marcar a sess√£o como inv√°lida para evitar conflitos
          req.session.sessionInvalid = true;

          // Retornar erro de sess√£o inv√°lida
          if (req.originalUrl.startsWith('/api/')) {
            return res.status(401).json({ 
              message: "Sess√£o inv√°lida ou encerrada",
              sessionInvalid: true,
              redirectTo: "/entrar"
            });
          } else {
            return res.redirect('/entrar?sessao=encerrada');
          }
        }

        // Se chegou aqui, a sess√£o √© v√°lida, continuar normalmente
        return next();

      } catch (error) {
        console.error('‚ùå Erro ao verificar sess√£o na tabela:', error);
        // Em caso de erro na verifica√ß√£o, permitir continuar (fail-safe)
        return next();
      }
    })();

    // N√£o chamar next() aqui, pois o c√≥digo ass√≠ncrono acima j√° far√° isso
    return;
  }

  // Log detalhado apenas ap√≥s confirmar autentica√ß√£o
  console.log(`‚úÖ Usu√°rio autenticado acessando ${req.originalUrl}:`, {
    userId: req.user?.id,
    username: req.user?.username,
    sessionId: req.sessionID
  });

  // Verifica√ß√£o de 2FA
  if (req.user?.twoFactorEnabled === true && !req.session.twoFactorVerified) {
    const bypassRoutes = [
      '/api/auth/verify-2fa',
      '/api/auth/2fa-session-status',
      '/api/auth/logout',
      '/api/conta/2fa/status'
    ];

    if (bypassRoutes.some(route => req.originalUrl.includes(route))) {
      return next();
    }

    const isApiRequest = req.originalUrl.startsWith('/api/');
    if (isApiRequest) {
      return res.status(403).json({ 
        requiresTwoFactor: true,
        redirectTo: "/verificar-2fa"
      });
    } else {
      return res.redirect('/verificar-2fa');
    }
  }

  return next();
}

// Middleware para verificar role de administrador
export function isAdmin(req: Request, res: Response, next: NextFunction) {
  // Verifica√ß√µes de seguran√ßa para administrador
  if (!req.isAuthenticated || typeof req.isAuthenticated !== 'function' || !req.isAuthenticated()) {
    return res.status(401).json({ message: "Acesso n√£o autorizado" });
  }

  if (!req.user || req.user.role !== "admin") {
    return res.status(403).json({ message: "Acesso restrito a administradores" });
  }

  // Se chegou aqui, √© um administrador autenticado

  // Verifica√ß√£o 2FA especial para administradores (seguran√ßa adicional)
  if (req.user.twoFactorEnabled === true && !req.session.twoFactorVerified) {

    // Para detectar tipo de requisi√ß√£o - cliente ou API
    const isApiRequest = req.headers.accept?.includes('application/json') || 
                        req.xhr || 
                        req.originalUrl.startsWith('/api/');

    if (isApiRequest) {
      return res.status(403).json({ 
        message: "Verifica√ß√£o 2FA necess√°ria para administradores", 
        requiresTwoFactor: true,
        redirectTo: "/verificar-2fa",
        error: "admin_two_factor_required"
      });
    } else {
      return res.redirect('/verificar-2fa?next=admin');
    }
  }

  // Se chegou aqui, √© um administrador v√°lido e com 2FA verificado se necess√°rio
  console.log(`‚úÖ Acesso administrativo autorizado para ${req.user.id}`);
  return next();
}