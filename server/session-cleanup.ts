import { connectionManager } from './connection-manager';

/**
 * Sistema de limpeza autom√°tica de sess√µes
 * Baseado nas melhores pr√°ticas de grandes sistemas (Google, Microsoft, Facebook)
 */

export interface SessionCleanupStats {
  expiredSessionsRemoved: number;
  inactiveSessionsRemoved: number;
  totalSessionsBefore: number;
  totalSessionsAfter: number;
  cleanupTime: Date;
}

export class SessionCleanupManager {
  private isRunning = false;
  private lastCleanup: Date | null = null;
  private stats: SessionCleanupStats[] = [];

  /**
   * Executa limpeza di√°ria - remove sess√µes expiradas h√° mais de 30 dias
   */
  async dailyCleanup(): Promise<SessionCleanupStats> {
    if (this.isRunning) {
      throw new Error('Limpeza j√° est√° em execu√ß√£o');
    }

    this.isRunning = true;
    console.log('üßπ Iniciando limpeza di√°ria de sess√µes...');

    try {
      // Contar sess√µes antes da limpeza
      const beforeCountResult = await connectionManager.executeQuery(`
        SELECT COUNT(*) as total FROM user_sessions
      `) as { rows: { total: string }[] };
      const totalBefore = parseInt(beforeCountResult.rows[0]?.total || '0');

      // Remover sess√µes expiradas h√° mais de 30 dias
      const expiredResult = await connectionManager.executeQuery(`
        DELETE FROM user_sessions 
        WHERE expires_at < NOW() - INTERVAL '30 days'
        RETURNING id
      `) as { rowCount: number };

      const expiredRemoved = expiredResult.rowCount || 0;

      // Contar sess√µes ap√≥s a limpeza
      const afterCountResult = await connectionManager.executeQuery(`
        SELECT COUNT(*) as total FROM user_sessions
      `) as { rows: { total: string }[] };
      const totalAfter = parseInt(afterCountResult.rows[0]?.total || '0');

      const stats: SessionCleanupStats = {
        expiredSessionsRemoved: expiredRemoved,
        inactiveSessionsRemoved: 0,
        totalSessionsBefore: totalBefore,
        totalSessionsAfter: totalAfter,
        cleanupTime: new Date()
      };

      this.stats.push(stats);
      this.lastCleanup = new Date();

      console.log(`‚úÖ Limpeza di√°ria conclu√≠da:`, {
        sess√µesExpiradas: expiredRemoved,
        totalAntes: totalBefore,
        totalDepois: totalAfter
      });

      return stats;

    } finally {
      this.isRunning = false;
    }
  }

  /**
   * Executa limpeza semanal - remove sess√µes inativas h√° mais de 90 dias
   */
  async weeklyCleanup(): Promise<SessionCleanupStats> {
    if (this.isRunning) {
      throw new Error('Limpeza j√° est√° em execu√ß√£o');
    }

    this.isRunning = true;
    console.log('üßπ Iniciando limpeza semanal de sess√µes...');

    try {
      // Contar sess√µes antes da limpeza
      const beforeCountResult = await connectionManager.executeQuery(`
        SELECT COUNT(*) as total FROM user_sessions
      `) as { rows: { total: string }[] };
      const totalBefore = parseInt(beforeCountResult.rows[0]?.total || '0');

      // Remover sess√µes expiradas h√° mais de 30 dias
      const expiredResult = await connectionManager.executeQuery(`
        DELETE FROM user_sessions 
        WHERE expires_at < NOW() - INTERVAL '30 days'
        RETURNING id
      `) as { rowCount: number };

      // Remover sess√µes inativas h√° mais de 90 dias
      const inactiveResult = await connectionManager.executeQuery(`
        DELETE FROM user_sessions 
        WHERE is_active = false 
        AND last_activity < NOW() - INTERVAL '90 days'
        RETURNING id
      `) as { rowCount: number };

      const expiredRemoved = expiredResult.rowCount || 0;
      const inactiveRemoved = inactiveResult.rowCount || 0;

      // Contar sess√µes ap√≥s a limpeza
      const afterCountResult = await connectionManager.executeQuery(`
        SELECT COUNT(*) as total FROM user_sessions
      `) as { rows: { total: string }[] };
      const totalAfter = parseInt(afterCountResult.rows[0]?.total || '0');

      const stats: SessionCleanupStats = {
        expiredSessionsRemoved: expiredRemoved,
        inactiveSessionsRemoved: inactiveRemoved,
        totalSessionsBefore: totalBefore,
        totalSessionsAfter: totalAfter,
        cleanupTime: new Date()
      };

      this.stats.push(stats);
      this.lastCleanup = new Date();

      console.log(`‚úÖ Limpeza semanal conclu√≠da:`, {
        sess√µesExpiradas: expiredRemoved,
        sess√µesInativas: inactiveRemoved,
        totalAntes: totalBefore,
        totalDepois: totalAfter
      });

      return stats;

    } finally {
      this.isRunning = false;
    }
  }

  /**
   * Marca sess√µes como inativas baseado na √∫ltima atividade
   */
  async markInactiveSessions(): Promise<number> {
    console.log('‚è±Ô∏è Marcando sess√µes inativas...');

    try {
      // Marcar como inativas sess√µes sem atividade h√° mais de 24 horas
      const result = await connectionManager.executeQuery(`
        UPDATE user_sessions 
        SET is_active = false
        WHERE is_active = true 
        AND last_activity < NOW() - INTERVAL '24 hours'
        AND expires_at > NOW()
        RETURNING id
      `) as { rowCount: number };

      const marked = result.rowCount || 0;
      
      if (marked > 0) {
        console.log(`üîÑ ${marked} sess√µes marcadas como inativas`);
      }

      return marked;

    } catch (error) {
      console.error('‚ùå Erro ao marcar sess√µes inativas:', error);
      return 0;
    }
  }

  /**
   * Retorna estat√≠sticas das √∫ltimas limpezas
   */
  getCleanupStats(): SessionCleanupStats[] {
    return this.stats.slice(-10); // √öltimas 10 limpezas
  }

  /**
   * Retorna informa√ß√µes sobre o estado atual das sess√µes
   */
  async getCurrentSessionStats(): Promise<any> {
    try {
      const result = await connectionManager.executeQuery(`
        SELECT 
          COUNT(*) as total,
          COUNT(CASE WHEN is_active = true AND expires_at > NOW() THEN 1 END) as active,
          COUNT(CASE WHEN is_active = false AND expires_at > NOW() THEN 1 END) as inactive,
          COUNT(CASE WHEN expires_at <= NOW() THEN 1 END) as expired,
          COUNT(CASE WHEN last_activity < NOW() - INTERVAL '1 hour' AND is_active = true THEN 1 END) as idle_1h,
          COUNT(CASE WHEN last_activity < NOW() - INTERVAL '24 hours' AND is_active = true THEN 1 END) as idle_24h,
          COUNT(CASE WHEN created_at < NOW() - INTERVAL '30 days' AND expires_at <= NOW() THEN 1 END) as candidates_for_removal
        FROM user_sessions
      `) as { rows: any[] };

      return result.rows[0];
    } catch (error) {
      console.error('‚ùå Erro ao buscar estat√≠sticas de sess√µes:', error);
      return null;
    }
  }

  /**
   * For√ßa limpeza imediata (para uso administrativo)
   */
  async forceCleanup(): Promise<SessionCleanupStats> {
    console.log('üö® Executando limpeza for√ßada...');
    return await this.weeklyCleanup();
  }

  /**
   * Verifica se est√° na hora de executar limpeza autom√°tica
   */
  shouldRunDailyCleanup(): boolean {
    if (!this.lastCleanup) return true;
    
    const timeSinceLastCleanup = Date.now() - this.lastCleanup.getTime();
    const oneDayInMs = 24 * 60 * 60 * 1000;
    
    return timeSinceLastCleanup >= oneDayInMs;
  }

  /**
   * Verifica se est√° na hora de executar limpeza semanal
   */
  shouldRunWeeklyCleanup(): boolean {
    if (!this.lastCleanup) return true;
    
    const timeSinceLastCleanup = Date.now() - this.lastCleanup.getTime();
    const oneWeekInMs = 7 * 24 * 60 * 60 * 1000;
    
    return timeSinceLastCleanup >= oneWeekInMs;
  }
}

// Inst√¢ncia singleton
export const sessionCleanupManager = new SessionCleanupManager();