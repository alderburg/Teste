import { createContext, useContext, useState, useEffect, ReactNode } from "react";
import { useLocation } from "wouter";

// Definindo o tipo para o usu√°rio
interface User {
  id: number;
  username: string;
  email: string;
  role: string;
  avatar?: string;
  nome?: string;
  setor?: string;
  perfil?: string;
  mainUserId?: number;
  mainUsername?: string;
  isAdditionalUser?: boolean;
  twoFactorEnabled?: boolean;
  twoFactorSecret?: string;
  emailVerified?: boolean;
}

// Definindo a interface para o contexto de autentica√ß√£o
interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  login: (username: string, password: string) => Promise<void>;
  logout: () => void;
  logoutMutation: {
    mutate: () => void;
    isPending: boolean;
  };
  isLoading: boolean;
}

// Criando o contexto de autentica√ß√£o
const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Hook personalizado para acessar o contexto
export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error("useAuth deve ser usado dentro de um AuthProvider");
  }
  return context;
}

// Props para o provedor de autentica√ß√£o
interface AuthProviderProps {
  children: ReactNode;
}

// Provedor de autentica√ß√£o
export function AuthProvider({ children }: AuthProviderProps) {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [location, navigate] = useLocation();

  // Efeito para checar o estado de autentica√ß√£o ao carregar
  useEffect(() => {
    const checkAuth = async () => {
      try {
        // HOTFIX: Remover verifica√ß√£o de landing page temporariamente
        // para garantir que o login seja exigido em todas as rotas!
        // C√≥digo antigo que permitia acesso sem autentica√ß√£o:
        //const isLandingPage = window.location.pathname === '/' || window.location.pathname === '';
        //if (isLandingPage) {
        //  setUser(null);
        //  setIsLoading(false);
        //  return;
        //}

        // NUNCA PULAR a verifica√ß√£o de autentica√ß√£o (seguran√ßa cr√≠tica)

        // IMPORTANTE: Verificamos SEMPRE com a API para garantir que o usu√°rio est√° realmente logado
        // no servidor. Isso corrige o problema de redirecionamento ap√≥s logout, pois
        // n√£o confiamos em dados locais que podem estar desatualizados.

        // Manter dados locais temporariamente para WebSocket (limpar apenas se necess√°rio)
        const userData = localStorage.getItem('userData');
        let hasLocalData = false;
        
        try {
          if (userData) {
            const parsedData = JSON.parse(userData);
            if (parsedData && parsedData.id) {
              hasLocalData = true;
            }
          }
        } catch (e) {
          // Se dados locais est√£o corrompidos, limpar
          localStorage.removeItem('userData');
        }

        // Verificar se o usu√°rio est√° autenticado chamando a API
        const response = await fetch('/api/user', {
          credentials: 'include', // Importante para enviar cookies de sess√£o
          headers: {
            'Cache-Control': 'no-cache, no-store, must-revalidate',
            'Pragma': 'no-cache',
            'Expires': '0'
          }
        });

        if (response.ok) {
          // API retornou OK, usu√°rio autenticado
          const userData = await response.json();
          // Armazenar dados do usu√°rio no localStorage para uso futuro
          localStorage.setItem('userData', JSON.stringify(userData));
          setUser(userData);
        } else {
          // Se a resposta n√£o for ok, o usu√°rio n√£o est√° autenticado
          // API retornou n√£o-OK, usu√°rio n√£o autenticado
          // Limpar dados locais apenas agora que confirmamos com o servidor
          localStorage.removeItem('userData');
          localStorage.removeItem('user');
          localStorage.removeItem('token');
          setUser(null);
        }
      } catch (error) {
        console.error("Erro ao verificar autentica√ß√£o:", error);
        setUser(null);
      } finally {
        setIsLoading(false);
      }
    };

    checkAuth();
  }, [location]);

  // Fun√ß√£o de login
  const login = async (username: string, password: string) => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        credentials: 'include',
        body: JSON.stringify({ username, password })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Falha na autentica√ß√£o');
      }

      const userData = await response.json();
      setUser(userData);

      // Redirecionar para a p√°gina inicial ap√≥s login bem-sucedido
      navigate('/dashboard');
      return;
    } catch (error) {
      console.error("Erro no login:", error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  // Sistema de logout corrigido - servidor PRIMEIRO
  const logout = async () => {
    console.log("üö™ Iniciando logout...");
    
    // 1. Limpar estado de sess√£o encerrada
    try {
      const { clearSessionTerminated } = await import('@/lib/api');
      clearSessionTerminated();
    } catch (error) {
      console.log("‚ö†Ô∏è Erro ao importar clearSessionTerminated:", error);
    }
    
    // 2. PRIMEIRO: Fazer logout no servidor (antes de limpar dados locais)
    try {
      await fetch('/api/logout', {
        method: 'POST',
        credentials: 'include',
        headers: {
          'Cache-Control': 'no-cache, no-store, must-revalidate'
        }
      });
      console.log("‚úÖ Logout no servidor conclu√≠do");
    } catch (error) {
      console.log("‚ö†Ô∏è Erro no logout do servidor:", error);
    }
    
    // 3. Agora limpar o estado local
    setUser(null);
    setIsLoading(false);
    
    // 4. Limpar todos os dados locais
    localStorage.clear();
    sessionStorage.clear();
    
    // 5. Limpar cookies
    document.cookie.split(";").forEach(cookie => {
      const cookieName = cookie.trim().split("=")[0];
      if (cookieName) {
        document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
      }
    });
    
    // 6. Redirecionar para login
    console.log("üîÑ Redirecionando para login...");
    window.location.href = '/acessar';
  };

  // Implementa√ß√£o da logoutMutation para compatibilidade com o Header
  // Usando a mesma implementa√ß√£o da fun√ß√£o principal de logout para garantir consist√™ncia
  const logoutMutation = {
    mutate: () => logout(),
    isPending: false
  };

  // Valor do contexto
  const value = {
    user,
    isAuthenticated: !!user,
    login,
    logout,
    logoutMutation,
    isLoading,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}

// Componente para proteger rotas
export function RequireAuth({ children }: { children: ReactNode }) {
  const { isAuthenticated, isLoading } = useAuth();
  const [_, navigate] = useLocation();
  const [verificandoServidor, setVerificandoServidor] = useState(true);
  const [autorizadoPeloServidor, setAutorizadoPeloServidor] = useState(false);

  // Verificar a autentica√ß√£o diretamente com o servidor para garantir seguran√ßa
  useEffect(() => {
    const verificarAutenticacaoNoServidor = async () => {
      try {
        // Verifica√ß√£o direta com o servidor (n√£o confia apenas no localStorage)
        // Usamos a nova rota espec√≠fica para verificar status 2FA
        const response = await fetch('/api/auth/2fa-session-status', {
          method: 'GET',
          credentials: 'include',
          headers: {
            'Cache-Control': 'no-cache, no-store, must-revalidate',
            'Pragma': 'no-cache',
            'Expires': '0',
            'Accept': 'application/json'
          }
        });

        // Se o status for OK (200), verificamos a resposta
        if (response.ok) {
          const data = await response.json();
          console.log("Status da sess√£o 2FA:", data);

          // Verificamos se o usu√°rio est√° autenticado e se precisa de verifica√ß√£o 2FA
          if (data.authenticated) {
            if (data.requiresVerification) {
              // Verificar se j√° estamos na p√°gina de verifica√ß√£o 2FA para evitar o loop
              if (window.location.pathname !== '/verificar-2fa') {
                console.log("üîí 2FA requerido mas n√£o verificado. Redirecionando para verifica√ß√£o 2FA...");
                // Salvar a URL atual para redirecionamento ap√≥s verifica√ß√£o
                const currentPath = window.location.pathname;
                localStorage.setItem('twoFactorRedirect', currentPath);
                navigate('/verificar-2fa', { replace: true });
                return;
              } else {
                // J√° estamos na p√°gina de verifica√ß√£o 2FA, n√£o fazer nada
                console.log("üîí J√° estamos na p√°gina de verifica√ß√£o 2FA, n√£o redirecionando novamente");
                setAutorizadoPeloServidor(false);
                return;
              }
            } else {
              // Usu√°rio est√° autenticado e n√£o precisa de verifica√ß√£o 2FA (ou j√° verificou)
              setAutorizadoPeloServidor(true);
              return;
            }
          }
        }

        // Tentativa alternativa usando a verifica√ß√£o gen√©rica
        if (!response.ok) {
          const fallbackResponse = await fetch('/api/user', {
            method: 'GET',
            credentials: 'include',
            headers: {
              'Cache-Control': 'no-cache, no-store, must-revalidate',
              'Pragma': 'no-cache',
              'Expires': '0',
              'Accept': 'application/json'
            }
          });

          // Verificamos se h√° necessidade de 2FA
          if (fallbackResponse.status === 403) {
            try {
              const responseData = await fallbackResponse.json();
              console.log("Resposta de verifica√ß√£o alternativa:", responseData);

              // Se o servidor indicar que √© necess√°rio 2FA
              if (responseData.requiresTwoFactor) {
                // Evitar loop de redirecionamento
                if (window.location.pathname !== '/verificar-2fa') {
                  console.log("üîí 2FA requerido mas n√£o verificado (caminho alternativo). Redirecionando...");
                  // Salvar a URL atual para redirecionamento ap√≥s verifica√ß√£o
                  const currentPath = window.location.pathname;
                  localStorage.setItem('twoFactorRedirect', currentPath);
                  navigate('/verificar-2fa', { replace: true });
                  return;
                } else {
                  console.log("üîí J√° estamos na p√°gina de verifica√ß√£o 2FA (caminho alternativo), n√£o redirecionando");
                  setAutorizadoPeloServidor(false);
                  return;
                }
              }
            } catch (parseError) {
              console.error("Erro ao analisar resposta 403:", parseError);
            }
          }

          // Autorizado apenas se a resposta for OK (200)
          setAutorizadoPeloServidor(fallbackResponse.ok);
        } else {
          // Autorizado baseado na primeira resposta
          setAutorizadoPeloServidor(response.ok);
        }
      } catch (error) {
        console.error("Erro ao verificar autentica√ß√£o no servidor:", error);
        setAutorizadoPeloServidor(false);
      } finally {
        setVerificandoServidor(false);
      }
    };

    // S√≥ fazemos a verifica√ß√£o do servidor se os dados no cliente indicarem que o usu√°rio est√° logado
    if (!isLoading) {
      if (isAuthenticated) {
        verificarAutenticacaoNoServidor();
      } else {
        // Se isAuthenticated j√° √© falso, n√£o precisamos verificar o servidor
        setVerificandoServidor(false);
        setAutorizadoPeloServidor(false);
      }
    }
  }, [isLoading, isAuthenticated]);

  // Estado para controlar contagem de redirecionamentos e evitar loops
  const [redirectCount, setRedirectCount] = useState(0);

  // Redirecionamento para login quando necess√°rio
  useEffect(() => {
    // Se j√° redirecionamos muitas vezes, podemos estar em um loop
    if (redirectCount > 5) {
      console.error("üö® Loop de redirecionamento detectado no RequireAuth. Interrompendo redirecionamentos.");
      localStorage.removeItem('twoFactorRedirect'); // Limpar para facilitar debug
      return; // Parar redirecionamentos
    }

    // S√≥ redirecionamos quando tivermos certeza da autentica√ß√£o (cliente e servidor)
    if (!isLoading && !verificandoServidor) {
      // Se n√£o est√° autenticado no cliente
      if (!isAuthenticated) {
        console.log("Usu√°rio n√£o autenticado, redirecionando para login");

        // Limpar localStorage para garantir que dados antigos n√£o causem problemas
        localStorage.removeItem('userData');
        localStorage.removeItem('user');
        localStorage.removeItem('token');
        setRedirectCount(prev => prev + 1);

        // Usar o router para manter comportamento SPA
        navigate('/acessar', { replace: true });
      }
      // Se est√° autenticado mas n√£o est√° autorizado pelo servidor E n√£o estamos na p√°gina de verifica√ß√£o 2FA
      else if (!autorizadoPeloServidor && window.location.pathname !== '/verificar-2fa') {
        console.log("Usu√°rio n√£o autorizado pelo servidor, verificando necessidade de 2FA");

        // Se j√° estamos salvando o caminho atual no localStorage para 2FA, n√£o fazer nada
        const currentRedirectPath = localStorage.getItem('twoFactorRedirect');
        const currentPath = window.location.pathname;

        // Se o caminho atual n√£o √© o mesmo que j√° foi salvo para redirecionamento, atualizar
        if (currentRedirectPath !== currentPath) {
          localStorage.setItem('twoFactorRedirect', currentPath);
        }

        setRedirectCount(prev => prev + 1);
        navigate('/verificar-2fa', { replace: true });
      }
    }
  }, [isLoading, verificandoServidor, isAuthenticated, autorizadoPeloServidor, navigate, redirectCount]);

  // Mostrar loading enquanto verificamos autentica√ß√£o
  if (isLoading || verificandoServidor) {
    return <div className="flex items-center justify-center min-h-screen">
      <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
    </div>;
  }

  // S√≥ renderizamos o conte√∫do se o usu√°rio estiver autenticado no cliente E autorizado pelo servidor
  if (!isAuthenticated || !autorizadoPeloServidor) {
    return null; // O useEffect j√° cuidar√° do redirecionamento
  }

  return <>{children}</>;
}

// Componente para redirecionar imediatamente se o usu√°rio estiver autenticado
// VERS√ÉO ATUALIZADA E REFOR√áADA DO REDIRECIONAMENTO
export function RedirectIfAuthenticated({ children }: { children: ReactNode }) {
  const { isAuthenticated, isLoading } = useAuth();
  const [didRedirect, setDidRedirect] = useState(false);
  const [isVerifyingWithServer, setIsVerifyingWithServer] = useState(true);
  const [isAuthenticatedOnServer, setIsAuthenticatedOnServer] = useState(false);

  // Detectar par√¢metros especiais na URL
  const urlParams = new URLSearchParams(window.location.search);
  const hasLogoutParam = urlParams.get('logout') === 'true' || urlParams.get('logout') === 'error';

  // Verifica√ß√£o para 2FA pendente no localStorage - abordagem simples e direta
  const hasPending2FA = localStorage.getItem('pendingTwoFactor') === 'true';
  const currentPath = window.location.pathname;
  const isAuthPage = currentPath === '/acessar' || currentPath === '/cadastre-se' || currentPath === '/recuperar';

  // Efeito para verificar autentica√ß√£o diretamente com o servidor
  useEffect(() => {
    // Se temos par√¢metro de logout na URL, significa que o logout foi realizado
    // e n√£o devemos verificar com o servidor para evitar problemas de cache
    if (hasLogoutParam) {
      console.log("Detectado par√¢metro de logout na URL, ignorando verifica√ß√£o com o servidor");
      setIsVerifyingWithServer(false);
      setIsAuthenticatedOnServer(false);
      return;
    }

    // Verificar autentica√ß√£o diretamente com o servidor
    const verifyWithServer = async () => {
      try {
        console.log("Verificando autentica√ß√£o diretamente com o servidor...");
        const response = await fetch('/api/user', {
          credentials: 'include',
          headers: {
            'Cache-Control': 'no-cache, no-store, must-revalidate',
            'Pragma': 'no-cache',
            'Expires': '0'
          }
        });

        // Somente considerar autenticado se o servidor retornar OK
        const isAuth = response.ok;
        console.log("Resposta do servidor:", isAuth ? "Autenticado" : "N√£o autenticado");
        setIsAuthenticatedOnServer(isAuth);
      } catch (error) {
        console.error("Erro ao verificar autentica√ß√£o com o servidor:", error);
        setIsAuthenticatedOnServer(false);
      } finally {
        setIsVerifyingWithServer(false);
      }
    };

    // Somente verificar com o servidor se estamos em uma p√°gina de autentica√ß√£o
    if (isAuthPage) {
      verifyWithServer();
    } else {
      setIsVerifyingWithServer(false);
    }
  }, [isAuthPage, hasLogoutParam]);

  // Efeito para redirecionamento ap√≥s verifica√ß√£o com o servidor
  useEffect(() => {
    // S√≥ prosseguir se a verifica√ß√£o com o servidor estiver conclu√≠da
    if (isVerifyingWithServer) return;

    // Se estamos em uma p√°gina de autentica√ß√£o, o usu√°rio est√° autenticado no servidor e n√£o tem 2FA pendente
    if (isAuthPage && isAuthenticatedOnServer && !hasPending2FA && !didRedirect && !hasLogoutParam) {
      console.log("Redirecionamento ap√≥s verifica√ß√£o com servidor: usu√°rio autenticado acessando p√°gina de autentica√ß√£o");
      setDidRedirect(true);
      // Redirecionamento direto para o dashboard usando window.location para evitar problemas com rotas SPA
      window.location.href = "/dashboard";
    }
  }, [isAuthPage, isAuthenticatedOnServer, hasPending2FA, didRedirect, isVerifyingWithServer, hasLogoutParam]);

  // Se estamos na p√°gina de login com 2FA pendente, mantemos na p√°gina
  if (isAuthPage && hasPending2FA) {
    console.log("2FA pendente detectado na p√°gina de autentica√ß√£o - mantendo o usu√°rio aqui");
    return <>{children}</>;
  }

  // Se houver um par√¢metro de logout na URL, significa que acabamos de fazer logout
  // Neste caso, sempre mostramos a p√°gina de login sem verificar autentica√ß√£o
  if (hasLogoutParam) {
    console.log("Logout recente detectado, exibindo p√°gina de autentica√ß√£o");
    return <>{children}</>;
  }

  // Durante carregamento ou verifica√ß√£o com servidor, mostramos um loading m√≠nimo
  if (isLoading || isVerifyingWithServer) {
    console.log("Carregando status de autentica√ß√£o...");
    return null;
  }

  // Se estiver autenticado no servidor e n√£o haver redirecionamento em andamento
  if (isAuthPage && isAuthenticatedOnServer && !hasPending2FA && !didRedirect) {
    console.log("Usu√°rio autenticado em p√°gina de autentica√ß√£o - redirecionando");
    return <div className="fixed inset-0 flex items-center justify-center">
      <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
    </div>;
  }

  // Se n√£o estiver autenticado ou estiver em outra p√°gina, mostrar o conte√∫do normalmente
  console.log("Usu√°rio n√£o autenticado ou n√£o em p√°gina de auth, exibindo conte√∫do normalmente");
  return <>{children}</>;
}