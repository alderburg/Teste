
import { useEffect } from 'react';

export function useSessionGuard(sessionTerminated: boolean) {
  useEffect(() => {
    if (!sessionTerminated) return;

    console.log('ðŸ”’ Ativando proteÃ§Ã£o contra requisiÃ§Ãµes - sessÃ£o encerrada');

    // Interceptar XMLHttpRequest
    const originalXHROpen = XMLHttpRequest.prototype.open;
    const originalXHRSend = XMLHttpRequest.prototype.send;

    XMLHttpRequest.prototype.open = function(...args) {
      console.log('ðŸš« RequisiÃ§Ã£o XHR bloqueada devido Ã  sessÃ£o encerrada:', args[1]);
      return;
    };

    XMLHttpRequest.prototype.send = function() {
      console.log('ðŸš« Envio XHR bloqueado devido Ã  sessÃ£o encerrada');
      return;
    };

    // Interceptar fetch (backup adicional)
    const originalFetch = window.fetch;
    window.fetch = async (...args) => {
      console.log('ðŸš« RequisiÃ§Ã£o fetch bloqueada devido Ã  sessÃ£o encerrada:', args[0]);
      throw new Error('SessÃ£o encerrada - requisiÃ§Ã£o bloqueada');
    };

    // Bloquear submissÃ£o de formulÃ¡rios
    const handleFormSubmit = (e: Event) => {
      console.log('ðŸš« SubmissÃ£o de formulÃ¡rio bloqueada devido Ã  sessÃ£o encerrada');
      e.preventDefault();
      e.stopPropagation();
      return false;
    };

    // Adicionar listener para todos os formulÃ¡rios
    document.addEventListener('submit', handleFormSubmit, true);

    // Bloquear cliques em botÃµes de aÃ§Ã£o
    const handleButtonClick = (e: Event) => {
      const target = e.target as HTMLElement;
      if (target.tagName === 'BUTTON' || target.closest('button')) {
        const button = target.tagName === 'BUTTON' ? target : target.closest('button');
        if (button && !button.closest('[data-session-terminated="true"]')) {
          console.log('ðŸš« Clique em botÃ£o bloqueado devido Ã  sessÃ£o encerrada');
          e.preventDefault();
          e.stopPropagation();
          return false;
        }
      }
    };

    document.addEventListener('click', handleButtonClick, true);

    // Limpar ao desmontar ou quando sessÃ£o nÃ£o estiver mais encerrada
    return () => {
      XMLHttpRequest.prototype.open = originalXHROpen;
      XMLHttpRequest.prototype.send = originalXHRSend;
      window.fetch = originalFetch;
      document.removeEventListener('submit', handleFormSubmit, true);
      document.removeEventListener('click', handleButtonClick, true);
      
      console.log('ðŸ”“ ProteÃ§Ã£o contra requisiÃ§Ãµes removida');
    };
  }, [sessionTerminated]);
}
