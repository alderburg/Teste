import React, { useState, useEffect } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Link } from "wouter";
import {
  AlertCircle,
  AlertTriangle,
  ArrowRight,
  ArrowUpRight,
  Book,
  Calendar,
  Check,
  ChevronRight,
  ClipboardList,
  Clock,
  FileText,
  Headphones,
  HelpCircle,
  Lightbulb,
  Mail,
  MessageSquare,
  Monitor,
  Phone,
  Sparkles,
  ThumbsUp,
  Users
} from "lucide-react";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Separator } from "@/components/ui/separator";
import { useToast } from "@/hooks/use-toast";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";

// Schema de validação para o formulário de contato
const contatoSchema = z.object({
  nome: z.string({
    required_error: "O nome completo é obrigatório",
  }).min(3, "O nome deve ter pelo menos 3 caracteres"),
  email: z.string({
    required_error: "O e-mail é obrigatório",
  }).email("Formato de e-mail inválido"),
  assunto: z.string({
    required_error: "O assunto é obrigatório",
  }).min(3, "O assunto deve ter pelo menos 3 caracteres"),
  categoria: z.string({
    required_error: "A categoria é obrigatória",
  }).min(1, "Selecione uma categoria"),
  mensagem: z.string({
    required_error: "A mensagem é obrigatória",
  }).min(10, "A mensagem deve ter pelo menos 10 caracteres"),
});

type ContatoFormValues = z.infer<typeof contatoSchema>;

export default function SuportePage() {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [activeTab, setActiveTab] = useState("contato");
  const { toast } = useToast();
  
  // Estado para validação dos campos do formulário
  const [camposContatoValidados, setCamposContatoValidados] = useState({
    nome: true,
    email: true,
    assunto: true,
    categoria: true,
    mensagem: true
  });
  
  // Configuração do formulário com react-hook-form e validação zod
  const form = useForm<ContatoFormValues>({
    resolver: zodResolver(contatoSchema),
    defaultValues: {
      nome: "",
      email: "",
      assunto: "",
      categoria: "",
      mensagem: "",
    },
    mode: "onChange" // Validar ao mudar os campos
  });
  
  // Função para submissão do formulário
  function onSubmit(data: ContatoFormValues) {
    console.log("Dados do formulário:", data);
    setIsSubmitting(true);
    
    // Simulação de envio
    setTimeout(() => {
      toast({
        title: "Solicitação enviada com sucesso",
        description: "Nossa equipe entrará em contato em breve.",
      });
      
      // Reset form
      form.reset();
      setIsSubmitting(false);
    }, 1500);
  }
  
  // Função para verificar se é um email válido
  const isValidEmail = (email: string): boolean => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email.trim());
  };
  
  // Função para validar os campos do formulário
  const validateFormFields = (): boolean => {
    const formValues = form.getValues();
    
    // Validações para cada campo
    const validacoes = {
      nome: formValues.nome.trim() !== '',
      email: isValidEmail(formValues.email),
      assunto: formValues.assunto.trim() !== '',
      categoria: formValues.categoria.trim() !== '',
      mensagem: formValues.mensagem.trim() !== ''
    };
    
    // Atualiza o estado de validação
    setCamposContatoValidados(validacoes);
    
    // Verifica se há campos inválidos
    const camposInvalidos = Object.entries(validacoes)
      .filter(([_, valido]) => !valido)
      .map(([campo, _]) => campo);
    
    // Se houver campos inválidos, exibe um toast com os erros
    if (camposInvalidos.length > 0) {
      const camposFormatados = camposInvalidos.map(campo => {
        switch(campo) {
          case 'nome': return 'Nome';
          case 'email': return formValues.email.trim() === '' ? 'Email' : 'Email (formato inválido)';
          case 'assunto': return 'Assunto';
          case 'categoria': return 'Categoria';
          case 'mensagem': return 'Mensagem';
          default: return campo;
        }
      });
      
      toast({
        title: "Erro de validação",
        description: `Preencha os campos obrigatórios: ${camposFormatados.join(', ')}`,
        variant: "destructive",
      });
      
      return false;
    }
    
    return true;
  };
  
  // Função para lidar com a submissão do formulário
  const handleFormSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (validateFormFields()) {
      const data = form.getValues();
      onSubmit(data);
    }
  };
  
  // Função para trocar para a aba de contato
  const handleTabChange = (value: string) => {
    setActiveTab(value);
  }
  
  // Funções para validar campos quando o usuário sai do input
  const handleInputBlur = (e: React.FocusEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    
    if (name === 'nome') {
      setCamposContatoValidados(prev => ({
        ...prev,
        nome: value.trim() !== ''
      }));
    } else if (name === 'email') {
      setCamposContatoValidados(prev => ({
        ...prev,
        email: isValidEmail(value)
      }));
    } else if (name === 'assunto') {
      setCamposContatoValidados(prev => ({
        ...prev,
        assunto: value.trim() !== ''
      }));
    }
  };
  
  // Monitor changes to form values
  useEffect(() => {
    const subscription = form.watch((value) => {
      // Optional real-time validation updates
    });
    
    return () => subscription.unsubscribe();
  }, [form]);

  // FAQ data
  const faqItems = [
    {
      question: "Qual é o prazo de resposta do suporte técnico?",
      answer: "Nossa equipe de suporte técnico responde em até 4 horas durante os dias úteis (8h às 18h). Para solicitações recebidas fora do horário comercial, o atendimento será realizado no próximo dia útil."
    },
    {
      question: "Como recuperar minha senha de acesso?",
      answer: "Para recuperar sua senha, acesse a tela de login e clique em 'Esqueci minha senha'. Você receberá instruções no e-mail cadastrado para criar uma nova senha. Se não receber o e-mail em alguns minutos, verifique sua pasta de spam ou entre em contato com nosso suporte."
    },
    {
      question: "É possível ajustar as configurações de notificações?",
      answer: "Sim, você pode personalizar suas notificações acessando seu perfil no menu suspenso no canto superior direito e selecionando 'Configurações > Notificações'. Lá você pode ativar ou desativar notificações por e-mail, no aplicativo ou SMS."
    },
    {
      question: "Como exportar relatórios em diferentes formatos?",
      answer: "Na página de relatórios, após configurar os filtros desejados, clique no botão 'Exportar' no canto superior direito da tabela de resultados. Você pode escolher entre os formatos PDF, Excel ou CSV, dependendo da sua necessidade."
    },
    {
      question: "É possível integrar o sistema com outros aplicativos?",
      answer: "Sim, oferecemos APIs para integração com diversos sistemas. Dispomos de conectores prontos para as principais plataformas de e-commerce, ERPs e sistemas contábeis. Para integrações específicas, nossa equipe de desenvolvimento pode criar uma solução personalizada."
    }
  ];

  return (
    <div className="relative w-full overflow-x-hidden">
      {/* Header - Banner superior com degradê */}
      <section className="relative suporte-banner bg-gradient-to-r from-blue-600 to-indigo-700 px-4 py-6 md:py-8 lg:py-16 xl:py-24 mx-4 my-4 rounded-xl">
        {/* Padrão de fundo sutil */}
        <div className="absolute inset-0 opacity-10 bg-pattern rounded-xl"></div>
        
        <div className="container mx-auto relative">
          {/* Conteúdo do banner */}
          <div className="max-w-3xl text-white">
            <h1 className="text-2xl md:text-3xl lg:text-4xl xl:text-5xl font-bold mb-1 md:mb-2 lg:mb-4">
              Centro de Suporte
            </h1>
            <p className="text-sm md:text-base lg:text-lg xl:text-xl opacity-90">
              Soluções e recursos para apoiar seu negócio. Nossa equipe está pronta para ajudar.
            </p>
          </div>
        </div>
      </section>

      {/* Seção principal - navegação por abas */}
      <section className="container mx-auto px-4 py-8 md:py-16">
        <Tabs value={activeTab} onValueChange={handleTabChange} className="w-full">
          <TabsList className="grid w-full md:w-auto md:inline-grid grid-cols-2 md:grid-cols-2 h-auto p-1 mb-8 bg-gray-100 rounded-lg">
            <TabsTrigger value="contato" className="py-3 data-[state=active]:bg-white">
              <Headphones className="w-4 h-4 mr-2" />
              <span>Fale Conosco</span>
            </TabsTrigger>
            <TabsTrigger value="faq" className="py-3 data-[state=active]:bg-white">
              <HelpCircle className="w-4 h-4 mr-2" />
              <span>Perguntas Frequentes</span>
            </TabsTrigger>
          </TabsList>

          {/* Conteúdo da aba Fale Conosco */}
          <TabsContent value="contato" className="mt-0">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
              {/* Formulário de contato */}
              <div className="lg:col-span-2">
                <Card className="border-0 shadow-xl rounded-xl">
                  <CardHeader className="border-b pb-6">
                    <CardTitle className="text-2xl font-bold">Envie sua solicitação</CardTitle>
                    <CardDescription>
                      Preencha o formulário abaixo para entrar em contato com nossa equipe de suporte
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="pt-6">
                    <Form {...form}>
                      <form onSubmit={form.handleSubmit(onSubmit, (errors) => {
                        console.error("Erro ao submeter formulário:", errors);
                        // Mostra um toast com os erros de validação para o usuário
                        toast({
                          title: "Erro ao enviar",
                          description: "Verifique se todos os campos obrigatórios foram preenchidos corretamente",
                          variant: "destructive"
                        });
                      })} className="space-y-6">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                          <FormField
                            control={form.control}
                            name="nome"
                            render={({ field }) => (
                              <FormItem className="space-y-2">
                                <FormLabel className={!camposContatoValidados.nome ? "text-red-500" : ""}>
                                  Nome completo <span className="text-red-500">*</span>
                                </FormLabel>
                                <FormControl>
                                  <Input
                                    placeholder="Digite seu nome completo"
                                    {...field}
                                    className={!camposContatoValidados.nome ? "border-red-500" : ""}
                                    onBlur={(e) => {
                                      field.onBlur();
                                      handleInputBlur(e);
                                    }}
                                  />
                                </FormControl>
                                {!camposContatoValidados.nome && (
                                  <p className="mt-1 text-red-300 text-xs flex items-center">
                                    <AlertTriangle className="w-3 h-3 mr-1" /> O nome completo é obrigatório
                                  </p>
                                )}
                              </FormItem>
                            )}
                          />
                          <FormField
                            control={form.control}
                            name="email"
                            render={({ field }) => (
                              <FormItem className="space-y-2">
                                <FormLabel className={!camposContatoValidados.email ? "text-red-500" : ""}>
                                  E-mail <span className="text-red-500">*</span>
                                </FormLabel>
                                <FormControl>
                                  <Input
                                    type="text"
                                    placeholder="seu@email.com"
                                    {...field}
                                    className={!camposContatoValidados.email ? "border-red-500" : ""}
                                    onBlur={(e) => {
                                      field.onBlur();
                                      handleInputBlur(e);
                                    }}
                                  />
                                </FormControl>

                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                          <FormField
                            control={form.control}
                            name="assunto"
                            render={({ field }) => (
                              <FormItem className="space-y-2">
                                <FormLabel className={!camposContatoValidados.assunto ? "text-red-500" : ""}>
                                  Assunto <span className="text-red-500">*</span>
                                </FormLabel>
                                <FormControl>
                                  <Input
                                    placeholder="Resumo do seu contato"
                                    {...field}
                                    className={!camposContatoValidados.assunto ? "border-red-500" : ""}
                                    onBlur={(e) => {
                                      field.onBlur();
                                      handleInputBlur(e);
                                    }}
                                  />
                                </FormControl>

                                <FormMessage />
                              </FormItem>
                            )}
                          />
                          <FormField
                            control={form.control}
                            name="categoria"
                            render={({ field }) => (
                              <FormItem className="space-y-2">
                                <FormLabel className={!camposContatoValidados.categoria ? "text-red-500" : ""}>
                                  Categoria <span className="text-red-500">*</span>
                                </FormLabel>
                                <Select 
                                  onValueChange={(value) => {
                                    field.onChange(value);
                                    setCamposContatoValidados(prev => ({
                                      ...prev,
                                      categoria: value.trim() !== ''
                                    }));
                                  }}
                                  defaultValue={field.value}
                                >
                                  <FormControl>
                                    <SelectTrigger className={!camposContatoValidados.categoria ? "border-red-500" : ""}>
                                      <SelectValue placeholder="Selecione uma categoria" />
                                    </SelectTrigger>
                                  </FormControl>
                                  <SelectContent>
                                    <SelectItem value="duvida-tecnica">Dúvida técnica</SelectItem>
                                    <SelectItem value="problema">Reportar problema</SelectItem>
                                    <SelectItem value="sugestao">Sugestão de melhoria</SelectItem>
                                    <SelectItem value="financeiro">Financeiro/Cobrança</SelectItem>
                                    <SelectItem value="outros">Outros assuntos</SelectItem>
                                  </SelectContent>
                                </Select>

                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        </div>

                        <FormField
                          control={form.control}
                          name="mensagem"
                          render={({ field }) => (
                            <FormItem className="space-y-2">
                              <FormLabel className={!camposContatoValidados.mensagem ? "text-red-500" : ""}>
                                Mensagem <span className="text-red-500">*</span>
                              </FormLabel>
                              <FormControl>
                                <Textarea
                                  placeholder="Detalhe sua solicitação para que possamos ajudá-lo melhor"
                                  rows={6}
                                  className={`resize-none ${!camposContatoValidados.mensagem ? "border-red-500" : ""}`}
                                  {...field}
                                  onBlur={(e) => {
                                    field.onBlur();
                                    setCamposContatoValidados(prev => ({
                                      ...prev,
                                      mensagem: e.target.value.trim() !== ''
                                    }));
                                  }}
                                />
                              </FormControl>

                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <div className="flex items-center justify-between pt-2">
                          <p className="text-sm text-muted-foreground">
                            Tempo médio de resposta: <span className="font-medium text-green-600">4 horas úteis</span>
                          </p>
                          <Button 
                            type="submit" 
                            disabled={isSubmitting}
                            className="bg-blue-600 hover:bg-blue-700"
                          >
                            {isSubmitting ? "Enviando..." : "Enviar solicitação"}
                            {!isSubmitting && <ArrowRight className="ml-2 h-4 w-4" />}
                          </Button>
                        </div>
                      </form>
                    </Form>
                  </CardContent>
                </Card>
                
                {/* Tempo de resposta e feedback */}
                <div className="bg-gradient-to-r from-green-50 to-emerald-50 border border-green-100 rounded-lg p-4 mt-6 flex items-center">
                  <div className="bg-green-100 rounded-full p-2 mr-4">
                    <ThumbsUp className="w-6 h-6 text-green-600" />
                  </div>
                  <div>
                    <h3 className="font-medium text-green-800">Suporte com excelência</h3>
                    <p className="text-sm text-green-700">
                      Índice de satisfação de 97% com tempo médio de resolução de 3.2 horas
                    </p>
                  </div>
                </div>
              </div>

              {/* Canais de contato */}
              <div>
                <Card className="border-0 shadow-xl overflow-hidden rounded-xl">
                  <div className="bg-gradient-to-br from-blue-600 to-blue-700 text-white p-6 rounded-t-xl">
                    <h3 className="text-xl font-bold mb-1">Canais de Atendimento</h3>
                    <p className="text-blue-100 text-sm">Escolha a melhor forma de contato</p>
                  </div>
                  <CardContent className="pt-6">
                    <div className="space-y-6">
                      <div className="flex items-start gap-4">
                        <div className="bg-blue-50 rounded-full p-3 flex-shrink-0">
                          <MessageSquare className="h-6 w-6 text-blue-600" />
                        </div>
                        <div>
                          <h4 className="font-medium text-lg">Chat Online</h4>
                          <p className="text-sm text-gray-600 mb-2">
                            Converse em tempo real com um de nossos especialistas
                          </p>
                          <div className="flex items-center">
                            <span className="inline-flex h-2.5 w-2.5 rounded-full bg-green-500 mr-2"></span>
                            <span className="text-sm text-green-600 font-medium">Disponível agora</span>
                          </div>
                        </div>
                      </div>
                      
                      <Separator />
                      
                      <div className="flex items-start gap-4">
                        <div className="bg-blue-50 rounded-full p-3 flex-shrink-0">
                          <Mail className="h-6 w-6 text-blue-600" />
                        </div>
                        <div>
                          <h4 className="font-medium text-lg">E-mail</h4>
                          <p className="text-sm text-gray-600 mb-1">
                            suporte@meuprecocerto.com.br
                          </p>
                          <div className="flex items-center text-sm text-gray-500">
                            <Clock className="h-3.5 w-3.5 mr-1.5" />
                            <span>Resposta em até 4 horas úteis</span>
                          </div>
                        </div>
                      </div>
                      
                      <Separator />
                      
                      <div className="flex items-start gap-4">
                        <div className="bg-blue-50 rounded-full p-3 flex-shrink-0">
                          <Phone className="h-6 w-6 text-blue-600" />
                        </div>
                        <div>
                          <h4 className="font-medium text-lg">Telefone</h4>
                          <p className="text-xl font-medium text-gray-700 mb-1">
                            (11) 4002-8922
                          </p>
                          <div className="flex items-center text-sm text-gray-500">
                            <Calendar className="h-3.5 w-3.5 mr-1.5" />
                            <span>Seg a Sex, das 8h às 18h</span>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <Button className="w-full mt-6 bg-blue-600 hover:bg-blue-700">
                      <MessageSquare className="mr-2 h-4 w-4" />
                      <span>Iniciar Chat</span>
                    </Button>
                  </CardContent>
                </Card>

                {/* Alerta de manutenção */}
                <div className="mt-6 bg-amber-50 border border-amber-200 rounded-lg p-4">
                  <div className="flex gap-3">
                    <AlertCircle className="h-5 w-5 text-amber-500 flex-shrink-0 mt-0.5" />
                    <div>
                      <h4 className="font-medium text-amber-800">Manutenção programada</h4>
                      <p className="text-sm text-amber-700 mt-1">
                        No dia 12/05/2025, das 23h às 4h, nosso sistema passará por atualizações.
                        O acesso pode ser instável durante este período.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </TabsContent>

          {/* Conteúdo da aba FAQ */}
          <TabsContent value="faq" className="mt-0">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
              <div className="lg:col-span-2 space-y-6">
                <div className="mb-6">
                  <h2 className="text-2xl font-bold mb-2">Perguntas frequentes</h2>
                  <p className="text-gray-600">
                    Consulte nossa base de conhecimento para encontrar respostas para as dúvidas mais comuns
                  </p>
                </div>

                {/* Categorias de FAQ */}
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 mb-8">
                  <Link href="/treinamentos" className="h-full">
                    <Card className="border border-gray-200 hover:border-blue-200 hover:bg-blue-50/30 transition-all cursor-pointer h-full">
                      <CardContent className="p-4 flex items-start gap-3 h-full">
                        <div className="mt-1 bg-blue-100 rounded-full p-1.5">
                          <HelpCircle className="h-4 w-4 text-blue-600" />
                        </div>
                        <div>
                          <h4 className="font-medium">Primeiros passos</h4>
                          <p className="text-sm text-gray-500 mt-1">Configuração inicial e tutoriais</p>
                        </div>
                      </CardContent>
                    </Card>
                  </Link>
                  
                  <Link href="/treinamentos" className="h-full">
                    <Card className="border border-gray-200 hover:border-blue-200 hover:bg-blue-50/30 transition-all cursor-pointer h-full">
                      <CardContent className="p-4 flex items-start gap-3 h-full">
                        <div className="mt-1 bg-blue-100 rounded-full p-1.5">
                          <ClipboardList className="h-4 w-4 text-blue-600" />
                        </div>
                        <div>
                          <h4 className="font-medium">Cadastros</h4>
                          <p className="text-sm text-gray-500 mt-1">Produtos, serviços e fornecedores</p>
                        </div>
                      </CardContent>
                    </Card>
                  </Link>
                  
                  <Link href="/treinamentos" className="h-full">
                    <Card className="border border-gray-200 hover:border-blue-200 hover:bg-blue-50/30 transition-all cursor-pointer h-full">
                      <CardContent className="p-4 flex items-start gap-3 h-full">
                        <div className="mt-1 bg-blue-100 rounded-full p-1.5">
                          <Sparkles className="h-4 w-4 text-blue-600" />
                        </div>
                        <div>
                          <h4 className="font-medium">Precificação</h4>
                          <p className="text-sm text-gray-500 mt-1">Cálculos e estratégias de preços para seus produtos e serviços</p>
                        </div>
                      </CardContent>
                    </Card>
                  </Link>
                </div>

                {/* Accordion do FAQ */}
                <div className="bg-white rounded-xl border border-gray-200 shadow-sm divide-y">
                  {faqItems.map((item, index) => (
                    <details key={index} className="group p-6">
                      <summary className="flex cursor-pointer items-center justify-between">
                        <h3 className="text-lg font-medium text-gray-900">{item.question}</h3>
                        <span className="ml-6 flex-shrink-0 text-gray-400 group-open:rotate-180 transition-transform">
                          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                            <path strokeLinecap="round" strokeLinejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
                          </svg>
                        </span>
                      </summary>

                      <p className="mt-4 leading-relaxed text-gray-700">{item.answer}</p>
                    </details>
                  ))}
                </div>

                {/* Não encontrou sua dúvida? */}
                <div className="bg-gradient-to-r from-gray-50 to-gray-100 border border-gray-200 rounded-lg p-6 mt-8">
                  <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                    <div>
                      <h3 className="text-lg font-medium mb-1">Não encontrou o que procurava?</h3>
                      <p className="text-sm text-gray-600">Nossa equipe está pronta para esclarecer suas dúvidas</p>
                    </div>
                    <Button 
                      className="shrink-0 bg-blue-600 hover:bg-blue-700"
                      onClick={() => setActiveTab("contato")}
                    >
                      Enviar uma pergunta
                      <ArrowRight className="ml-2 h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </div>

              {/* Coluna lateral - Artigos populares */}
              <div>
                {/* Box azul - Agora em cima */}
                <Card className="bg-gradient-to-br from-indigo-50 to-blue-50 border border-blue-100 rounded-xl mb-6">
                  <CardContent className="pt-6">
                    <div className="flex justify-center mb-4">
                      <div className="bg-white p-3 rounded-full shadow-sm">
                        <Book className="h-8 w-8 text-blue-600" />
                      </div>
                    </div>
                    <h3 className="text-center text-lg font-bold text-blue-900 mb-2">Biblioteca completa</h3>
                    <p className="text-center text-blue-700 text-sm mb-6">
                      Explore nossa coleção com mais de 200 artigos e tutoriais
                    </p>
                    <Link href="/treinamentos">
                      <Button className="w-full bg-blue-600 hover:bg-blue-700">
                        Acessar biblioteca
                        <ChevronRight className="ml-1 h-4 w-4" />
                      </Button>
                    </Link>
                  </CardContent>
                </Card>

                {/* Box branco - Agora embaixo */}
                <Card className="border-0 shadow-lg rounded-xl">
                  <CardHeader className="pb-4 border-b">
                    <CardTitle className="text-lg font-bold">Base de conhecimento</CardTitle>
                    <CardDescription>
                      Conteúdos mais acessados pelos usuários
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="px-0 pt-0">
                    <div className="divide-y">
                      <div className="px-6 py-4 hover:bg-gray-50">
                        <Link href="/treinamentos" className="flex items-center justify-between group">
                          <div>
                            <h4 className="font-medium group-hover:text-blue-600 transition-colors">Como criar uma estratégia de precificação</h4>
                            <p className="text-sm text-gray-500 mt-0.5">5 min de leitura</p>
                          </div>
                          <ArrowUpRight className="h-4 w-4 text-blue-500 opacity-0 group-hover:opacity-100 transition-opacity" />
                        </Link>
                      </div>
                      
                      <div className="px-6 py-4 hover:bg-gray-50">
                        <Link href="/treinamentos" className="flex items-center justify-between group">
                          <div>
                            <h4 className="font-medium group-hover:text-blue-600 transition-colors">Importação em lote de produtos</h4>
                            <p className="text-sm text-gray-500 mt-0.5">3 min de leitura</p>
                          </div>
                          <ArrowUpRight className="h-4 w-4 text-blue-500 opacity-0 group-hover:opacity-100 transition-opacity" />
                        </Link>
                      </div>
                      
                      <div className="px-6 py-4 hover:bg-gray-50">
                        <Link href="/treinamentos" className="flex items-center justify-between group">
                          <div>
                            <h4 className="font-medium group-hover:text-blue-600 transition-colors">Configurando alertas de estoque</h4>
                            <p className="text-sm text-gray-500 mt-0.5">4 min de leitura</p>
                          </div>
                          <ArrowUpRight className="h-4 w-4 text-blue-500 opacity-0 group-hover:opacity-100 transition-opacity" />
                        </Link>
                      </div>
                      
                      <div className="px-6 py-4 hover:bg-gray-50">
                        <Link href="/treinamentos" className="flex items-center justify-between group">
                          <div>
                            <h4 className="font-medium group-hover:text-blue-600 transition-colors">Análise de rentabilidade por produto</h4>
                            <p className="text-sm text-gray-500 mt-0.5">6 min de leitura</p>
                          </div>
                          <ArrowUpRight className="h-4 w-4 text-blue-500 opacity-0 group-hover:opacity-100 transition-opacity" />
                        </Link>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          </TabsContent>


        </Tabs>
      </section>

      {/* Seção de compromisso */}
      <section className="bg-blue-50 py-12 mt-8">
        <div className="container mx-auto px-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <div className="text-center">
              <div className="inline-flex items-center justify-center h-16 w-16 rounded-full bg-blue-100 text-blue-600 mb-4">
                <Check className="h-8 w-8" />
              </div>
              <h3 className="text-lg font-bold mb-2">Resposta rápida</h3>
              <p className="text-sm text-gray-600">
                Garantimos resposta em até 4 horas em dias úteis para todas as solicitações.
              </p>
            </div>
            
            <div className="text-center">
              <div className="inline-flex items-center justify-center h-16 w-16 rounded-full bg-blue-100 text-blue-600 mb-4">
                <Users className="h-8 w-8" />
              </div>
              <h3 className="text-lg font-bold mb-2">Suporte especializado</h3>
              <p className="text-sm text-gray-600">
                Nossa equipe é treinada em precificação e gestão de negócios para melhor atendê-lo.
              </p>
            </div>
            
            <div className="text-center">
              <div className="inline-flex items-center justify-center h-16 w-16 rounded-full bg-blue-100 text-blue-600 mb-4">
                <ThumbsUp className="h-8 w-8" />
              </div>
              <h3 className="text-lg font-bold mb-2">Satisfação garantida</h3>
              <p className="text-sm text-gray-600">
                97% dos nossos clientes avaliam nosso suporte como excelente ou muito bom.
              </p>
            </div>
          </div>
        </div>
      </section>
    </div>
  );
}