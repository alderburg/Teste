/**
 * Script para testar se os valores de valor_credito e valor_cartao est√£o sendo salvos corretamente
 * ap√≥s as corre√ß√µes implementadas
 */

import pg from 'pg';
const { Pool } = pg;

async function testValorCreditoCartao() {
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
  });

  try {
    console.log('üîç Testando valores de cr√©dito e cart√£o ap√≥s corre√ß√µes...\n');

    // Buscar pagamentos recentes para verificar os valores
    const query = `
      SELECT 
        id, 
        user_id,
        valor,
        valor_cartao,
        valor_credito,
        valor_diferenca,
        metodo_pagamento,
        resumo_pagamento,
        plano_nome,
        periodo,
        data_pagamento,
        stripe_invoice_id
      FROM pagamentos 
      WHERE data_pagamento >= NOW() - INTERVAL '30 days'
      ORDER BY data_pagamento DESC
      LIMIT 10
    `;

    const result = await pool.query(query);
    
    if (result.rows.length === 0) {
      console.log('‚ùå Nenhum pagamento encontrado nos √∫ltimos 30 dias');
      return;
    }

    console.log(`‚úÖ Encontrados ${result.rows.length} pagamentos para an√°lise:\n`);

    result.rows.forEach((pagamento, index) => {
      console.log(`üìã Pagamento ${index + 1}:`);
      console.log(`   ID: ${pagamento.id}`);
      console.log(`   Usu√°rio: ${pagamento.user_id}`);
      console.log(`   Plano: ${pagamento.plano_nome} (${pagamento.periodo})`);
      console.log(`   M√©todo: ${pagamento.metodo_pagamento}`);
      console.log(`   Data: ${new Date(pagamento.data_pagamento).toLocaleDateString('pt-BR')}`);
      console.log(`   Invoice ID: ${pagamento.stripe_invoice_id}`);
      console.log(`   ‚úÖ Valores:`);
      console.log(`      - Valor total: R$ ${parseFloat(pagamento.valor).toFixed(2)}`);
      console.log(`      - Valor cart√£o: R$ ${parseFloat(pagamento.valor_cartao || 0).toFixed(2)}`);
      console.log(`      - Valor cr√©dito: R$ ${parseFloat(pagamento.valor_credito || 0).toFixed(2)}`);
      
      if (pagamento.valor_diferenca) {
        const diferenca = parseFloat(pagamento.valor_diferenca);
        if (diferenca > 0) {
          console.log(`      - Saldo entre planos: R$ ${diferenca.toFixed(2)}`);
        } else if (diferenca < 0) {
          console.log(`      - Cr√©ditos gerados: R$ ${Math.abs(diferenca).toFixed(2)}`);
        }
      }
      
      console.log(`   üí¨ Resumo: ${pagamento.resumo_pagamento}`);
      
      // Valida√ß√µes
      const valorTotal = parseFloat(pagamento.valor);
      const valorCartao = parseFloat(pagamento.valor_cartao || 0);
      const valorCredito = parseFloat(pagamento.valor_credito || 0);
      
      console.log(`   üîç Valida√ß√µes:`);
      
      // Verificar se os valores fazem sentido
      if (pagamento.metodo_pagamento === 'Cart√£o de Cr√©dito' && valorCredito > 0) {
        console.log(`      ‚ùå ERRO: M√©todo "Cart√£o de Cr√©dito" mas tem valor_credito > 0`);
      } else if (pagamento.metodo_pagamento === 'Cr√©dito MPC' && valorCartao > 0) {
        console.log(`      ‚ùå ERRO: M√©todo "Cr√©dito MPC" mas tem valor_cartao > 0`);
      } else if (pagamento.metodo_pagamento === 'H√≠brido' && (valorCartao === 0 || valorCredito === 0)) {
        console.log(`      ‚ùå ERRO: M√©todo "H√≠brido" mas um dos valores √© zero`);
      } else {
        console.log(`      ‚úÖ Valores consistentes com o m√©todo de pagamento`);
      }
      
      // Verificar se valor_credito + valor_cartao n√£o excede muito o valor total
      // (pode haver pequenas diferen√ßas devido a diferen√ßas entre planos)
      const soma = valorCartao + valorCredito;
      if (Math.abs(soma - valorTotal) > 0.01 && !pagamento.valor_diferenca) {
        console.log(`      ‚ö†Ô∏è ATEN√á√ÉO: Soma cart√£o+cr√©dito (R$ ${soma.toFixed(2)}) difere do valor total (R$ ${valorTotal.toFixed(2)})`);
      } else {
        console.log(`      ‚úÖ Soma dos valores est√° coerente`);
      }
      
      console.log('\n' + '‚îÄ'.repeat(80) + '\n');
    });

    // Estat√≠sticas gerais
    const stats = {
      totalPagamentos: result.rows.length,
      pagamentosCartao: result.rows.filter(p => p.metodo_pagamento === 'Cart√£o de Cr√©dito').length,
      pagamentosCredito: result.rows.filter(p => p.metodo_pagamento === 'Cr√©dito MPC').length,
      pagamentosHibrido: result.rows.filter(p => p.metodo_pagamento === 'H√≠brido').length,
      comDiferenca: result.rows.filter(p => p.valor_diferenca).length
    };

    console.log('üìä ESTAT√çSTICAS DOS PAGAMENTOS:');
    console.log(`   Total de pagamentos: ${stats.totalPagamentos}`);
    console.log(`   Cart√£o de cr√©dito: ${stats.pagamentosCartao}`);
    console.log(`   Cr√©dito MPC: ${stats.pagamentosCredito}`);
    console.log(`   H√≠brido: ${stats.pagamentosHibrido}`);
    console.log(`   Com valor_diferenca: ${stats.comDiferenca}`);

  } catch (error) {
    console.error('‚ùå Erro ao testar valores:', error);
  } finally {
    await pool.end();
  }
}

// Executar o teste
testValorCreditoCartao().catch(console.error);